`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module input_loader_r1_ln_iembed_fp32_input_loader_r1_ln_iembed_fp32_Pipeline_decoder_block_loop_read_input_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input_mmap_AWVALID,
        m_axi_input_mmap_AWREADY,
        m_axi_input_mmap_AWADDR,
        m_axi_input_mmap_AWID,
        m_axi_input_mmap_AWLEN,
        m_axi_input_mmap_AWSIZE,
        m_axi_input_mmap_AWBURST,
        m_axi_input_mmap_AWLOCK,
        m_axi_input_mmap_AWCACHE,
        m_axi_input_mmap_AWPROT,
        m_axi_input_mmap_AWQOS,
        m_axi_input_mmap_AWREGION,
        m_axi_input_mmap_AWUSER,
        m_axi_input_mmap_WVALID,
        m_axi_input_mmap_WREADY,
        m_axi_input_mmap_WDATA,
        m_axi_input_mmap_WSTRB,
        m_axi_input_mmap_WLAST,
        m_axi_input_mmap_WID,
        m_axi_input_mmap_WUSER,
        m_axi_input_mmap_ARVALID,
        m_axi_input_mmap_ARREADY,
        m_axi_input_mmap_ARADDR,
        m_axi_input_mmap_ARID,
        m_axi_input_mmap_ARLEN,
        m_axi_input_mmap_ARSIZE,
        m_axi_input_mmap_ARBURST,
        m_axi_input_mmap_ARLOCK,
        m_axi_input_mmap_ARCACHE,
        m_axi_input_mmap_ARPROT,
        m_axi_input_mmap_ARQOS,
        m_axi_input_mmap_ARREGION,
        m_axi_input_mmap_ARUSER,
        m_axi_input_mmap_RVALID,
        m_axi_input_mmap_RREADY,
        m_axi_input_mmap_RDATA,
        m_axi_input_mmap_RLAST,
        m_axi_input_mmap_RID,
        m_axi_input_mmap_RFIFONUM,
        m_axi_input_mmap_RUSER,
        m_axi_input_mmap_RRESP,
        m_axi_input_mmap_BVALID,
        m_axi_input_mmap_BREADY,
        m_axi_input_mmap_BRESP,
        m_axi_input_mmap_BID,
        m_axi_input_mmap_BUSER,
        input_stream_s_din,
        input_stream_s_full_n,
        input_stream_s_write,
        zext_ln2955,
        zext_ln2968,
        mul3_i,
        input_mmap_offset
);
parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input_mmap_AWVALID;
input   m_axi_input_mmap_AWREADY;
output  [63:0] m_axi_input_mmap_AWADDR;
output  [0:0] m_axi_input_mmap_AWID;
output  [31:0] m_axi_input_mmap_AWLEN;
output  [2:0] m_axi_input_mmap_AWSIZE;
output  [1:0] m_axi_input_mmap_AWBURST;
output  [1:0] m_axi_input_mmap_AWLOCK;
output  [3:0] m_axi_input_mmap_AWCACHE;
output  [2:0] m_axi_input_mmap_AWPROT;
output  [3:0] m_axi_input_mmap_AWQOS;
output  [3:0] m_axi_input_mmap_AWREGION;
output  [0:0] m_axi_input_mmap_AWUSER;
output   m_axi_input_mmap_WVALID;
input   m_axi_input_mmap_WREADY;
output  [511:0] m_axi_input_mmap_WDATA;
output  [63:0] m_axi_input_mmap_WSTRB;
output   m_axi_input_mmap_WLAST;
output  [0:0] m_axi_input_mmap_WID;
output  [0:0] m_axi_input_mmap_WUSER;
output   m_axi_input_mmap_ARVALID;
input   m_axi_input_mmap_ARREADY;
output  [63:0] m_axi_input_mmap_ARADDR;
output  [0:0] m_axi_input_mmap_ARID;
output  [31:0] m_axi_input_mmap_ARLEN;
output  [2:0] m_axi_input_mmap_ARSIZE;
output  [1:0] m_axi_input_mmap_ARBURST;
output  [1:0] m_axi_input_mmap_ARLOCK;
output  [3:0] m_axi_input_mmap_ARCACHE;
output  [2:0] m_axi_input_mmap_ARPROT;
output  [3:0] m_axi_input_mmap_ARQOS;
output  [3:0] m_axi_input_mmap_ARREGION;
output  [0:0] m_axi_input_mmap_ARUSER;
input   m_axi_input_mmap_RVALID;
output   m_axi_input_mmap_RREADY;
input  [511:0] m_axi_input_mmap_RDATA;
input   m_axi_input_mmap_RLAST;
input  [0:0] m_axi_input_mmap_RID;
input  [8:0] m_axi_input_mmap_RFIFONUM;
input  [0:0] m_axi_input_mmap_RUSER;
input  [1:0] m_axi_input_mmap_RRESP;
input   m_axi_input_mmap_BVALID;
output   m_axi_input_mmap_BREADY;
input  [1:0] m_axi_input_mmap_BRESP;
input  [0:0] m_axi_input_mmap_BID;
input  [0:0] m_axi_input_mmap_BUSER;
output  [512:0] input_stream_s_din;
input   input_stream_s_full_n;
output   input_stream_s_write;
input  [35:0] zext_ln2955;
input  [30:0] zext_ln2968;
input  [31:0] mul3_i;
input  [63:0] input_mmap_offset;
reg ap_idle;
reg m_axi_input_mmap_ARVALID;
reg m_axi_input_mmap_RREADY;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_idle_pp0;
reg   [0:0] or_ln2968_reg_406;
reg   [0:0] or_ln2968_reg_406_pp0_iter3_reg;
reg    ap_block_state5_io;
reg   [0:0] icmp_ln2968_reg_402;
reg   [0:0] icmp_ln2968_reg_402_pp0_iter14_reg;
reg    ap_block_state16_pp0_stage0_iter15;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln2968_fu_197_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    input_mmap_blk_n_R;
wire    ap_block_pp0_stage0;
reg    input_mmap_blk_n_AR;
reg    input_stream_s_blk_n;
reg   [0:0] first_iter_0_reg_130;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln2968_cast_fu_151_p1;
reg   [63:0] zext_ln2968_cast_reg_397;
reg   [0:0] icmp_ln2968_reg_402_pp0_iter2_reg;
reg   [0:0] icmp_ln2968_reg_402_pp0_iter3_reg;
reg   [0:0] icmp_ln2968_reg_402_pp0_iter4_reg;
reg   [0:0] icmp_ln2968_reg_402_pp0_iter5_reg;
reg   [0:0] icmp_ln2968_reg_402_pp0_iter6_reg;
reg   [0:0] icmp_ln2968_reg_402_pp0_iter7_reg;
reg   [0:0] icmp_ln2968_reg_402_pp0_iter8_reg;
reg   [0:0] icmp_ln2968_reg_402_pp0_iter9_reg;
reg   [0:0] icmp_ln2968_reg_402_pp0_iter10_reg;
reg   [0:0] icmp_ln2968_reg_402_pp0_iter11_reg;
reg   [0:0] icmp_ln2968_reg_402_pp0_iter12_reg;
reg   [0:0] icmp_ln2968_reg_402_pp0_iter13_reg;
wire   [0:0] or_ln2968_fu_243_p2;
wire   [3:0] trunc_ln234_fu_263_p1;
reg   [3:0] trunc_ln234_reg_410;
reg   [57:0] trunc_ln2_reg_415;
reg    ap_condition_exit_pp0_iter2_stage0;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_135_p4;
wire    ap_loop_init;
wire  signed [63:0] sext_ln235_fu_331_p1;
reg   [31:0] i_fu_76;
wire   [31:0] select_ln235_fu_273_p3;
reg   [4:0] block_id_fu_80;
wire   [4:0] select_ln2968_fu_255_p3;
reg   [35:0] indvar_flatten_fu_84;
wire   [35:0] add_ln2968_fu_202_p2;
wire   [512:0] zext_ln150_fu_343_p1;
reg    ap_block_pp0_stage0_01001;
reg    input_stream_s_write_local;
wire   [0:0] icmp_ln235_fu_232_p2;
wire   [0:0] xor_ln2968_fu_237_p2;
wire   [4:0] add_ln2968_1_fu_249_p2;
wire   [31:0] add_ln235_fu_267_p2;
wire   [26:0] shl_ln_fu_305_p3;
wire   [63:0] zext_ln234_fu_312_p1;
wire   [63:0] add_ln234_fu_316_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 i_fu_76 = 32'd0;
#0 block_id_fu_80 = 5'd0;
#0 indvar_flatten_fu_84 = 36'd0;
#0 ap_done_reg = 1'b0;
end
input_loader_r1_ln_iembed_fp32_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter14_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter2_stage0)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            block_id_fu_80 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln2968_reg_402 == 1'd0))) begin
            block_id_fu_80 <= select_ln2968_fu_255_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln2968_reg_402_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_0_reg_130 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        first_iter_0_reg_130 <= 1'd1;
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_fu_76 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln2968_reg_402 == 1'd0))) begin
            i_fu_76 <= select_ln235_fu_273_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_84 <= 36'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln2968_fu_197_p2 == 1'd0))) begin
            indvar_flatten_fu_84 <= add_ln2968_fu_202_p2;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln2968_reg_402_pp0_iter10_reg <= icmp_ln2968_reg_402_pp0_iter9_reg;
        icmp_ln2968_reg_402_pp0_iter11_reg <= icmp_ln2968_reg_402_pp0_iter10_reg;
        icmp_ln2968_reg_402_pp0_iter12_reg <= icmp_ln2968_reg_402_pp0_iter11_reg;
        icmp_ln2968_reg_402_pp0_iter13_reg <= icmp_ln2968_reg_402_pp0_iter12_reg;
        icmp_ln2968_reg_402_pp0_iter14_reg <= icmp_ln2968_reg_402_pp0_iter13_reg;
        icmp_ln2968_reg_402_pp0_iter2_reg <= icmp_ln2968_reg_402;
        icmp_ln2968_reg_402_pp0_iter3_reg <= icmp_ln2968_reg_402_pp0_iter2_reg;
        icmp_ln2968_reg_402_pp0_iter4_reg <= icmp_ln2968_reg_402_pp0_iter3_reg;
        icmp_ln2968_reg_402_pp0_iter5_reg <= icmp_ln2968_reg_402_pp0_iter4_reg;
        icmp_ln2968_reg_402_pp0_iter6_reg <= icmp_ln2968_reg_402_pp0_iter5_reg;
        icmp_ln2968_reg_402_pp0_iter7_reg <= icmp_ln2968_reg_402_pp0_iter6_reg;
        icmp_ln2968_reg_402_pp0_iter8_reg <= icmp_ln2968_reg_402_pp0_iter7_reg;
        icmp_ln2968_reg_402_pp0_iter9_reg <= icmp_ln2968_reg_402_pp0_iter8_reg;
        or_ln2968_reg_406 <= or_ln2968_fu_243_p2;
        or_ln2968_reg_406_pp0_iter3_reg <= or_ln2968_reg_406;
        trunc_ln234_reg_410 <= trunc_ln234_fu_263_p1;
        trunc_ln2_reg_415 <= {{add_ln234_fu_316_p2[63:6]}};
    end
end
always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln2968_reg_402 <= icmp_ln2968_fu_197_p2;
        zext_ln2968_cast_reg_397[30 : 0] <= zext_ln2968_cast_fu_151_p1[30 : 0];
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln2968_fu_197_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln2968_reg_402 == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage0 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter14_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end
always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln2968_reg_402_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_0_phi_fu_135_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_135_p4 = first_iter_0_reg_130;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln2968_reg_406_pp0_iter3_reg == 1'd1))) begin
        input_mmap_blk_n_AR = m_axi_input_mmap_ARREADY;
    end else begin
        input_mmap_blk_n_AR = 1'b1;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln2968_reg_402_pp0_iter14_reg == 1'd0))) begin
        input_mmap_blk_n_R = m_axi_input_mmap_RVALID;
    end else begin
        input_mmap_blk_n_R = 1'b1;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln2968_reg_402_pp0_iter14_reg == 1'd0))) begin
        input_stream_s_blk_n = input_stream_s_full_n;
    end else begin
        input_stream_s_blk_n = 1'b1;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2968_reg_402_pp0_iter14_reg == 1'd0))) begin
        input_stream_s_write_local = 1'b1;
    end else begin
        input_stream_s_write_local = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln2968_reg_406_pp0_iter3_reg == 1'd1))) begin
        m_axi_input_mmap_ARVALID = 1'b1;
    end else begin
        m_axi_input_mmap_ARVALID = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln2968_reg_402_pp0_iter14_reg == 1'd0))) begin
        m_axi_input_mmap_RREADY = 1'b1;
    end else begin
        m_axi_input_mmap_RREADY = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign add_ln234_fu_316_p2 = (zext_ln234_fu_312_p1 + input_mmap_offset);
assign add_ln235_fu_267_p2 = (i_fu_76 + 32'd1);
assign add_ln2968_1_fu_249_p2 = (block_id_fu_80 + 5'd1);
assign add_ln2968_fu_202_p2 = (indvar_flatten_fu_84 + 36'd1);
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b1 == ap_block_state16_pp0_stage0_iter15));
end
always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b1 == ap_block_state16_pp0_stage0_iter15)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_io)));
end
always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b1 == ap_block_state16_pp0_stage0_iter15)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_io)));
end
always @ (*) begin
    ap_block_state16_pp0_stage0_iter15 = (((input_stream_s_full_n == 1'b0) & (icmp_ln2968_reg_402_pp0_iter14_reg == 1'd0)) | ((icmp_ln2968_reg_402_pp0_iter14_reg == 1'd0) & (m_axi_input_mmap_RVALID == 1'b0)));
end
always @ (*) begin
    ap_block_state5_io = ((m_axi_input_mmap_ARREADY == 1'b0) & (or_ln2968_reg_406_pp0_iter3_reg == 1'd1));
end
assign ap_done = ap_done_sig;
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_enable_reg_pp0_iter0 = ap_start_int;
assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;
assign ap_ready = ap_ready_sig;
assign icmp_ln235_fu_232_p2 = (($signed(i_fu_76) < $signed(mul3_i)) ? 1'b1 : 1'b0);
assign icmp_ln2968_fu_197_p2 = ((indvar_flatten_fu_84 == zext_ln2955) ? 1'b1 : 1'b0);
assign input_stream_s_din = zext_ln150_fu_343_p1;
assign input_stream_s_write = input_stream_s_write_local;
assign m_axi_input_mmap_ARADDR = sext_ln235_fu_331_p1;
assign m_axi_input_mmap_ARBURST = 2'd0;
assign m_axi_input_mmap_ARCACHE = 4'd0;
assign m_axi_input_mmap_ARID = 1'd0;
assign m_axi_input_mmap_ARLEN = zext_ln2968_cast_reg_397;
assign m_axi_input_mmap_ARLOCK = 2'd0;
assign m_axi_input_mmap_ARPROT = 3'd0;
assign m_axi_input_mmap_ARQOS = 4'd0;
assign m_axi_input_mmap_ARREGION = 4'd0;
assign m_axi_input_mmap_ARSIZE = 3'd0;
assign m_axi_input_mmap_ARUSER = 1'd0;
assign m_axi_input_mmap_AWADDR = 64'd0;
assign m_axi_input_mmap_AWBURST = 2'd0;
assign m_axi_input_mmap_AWCACHE = 4'd0;
assign m_axi_input_mmap_AWID = 1'd0;
assign m_axi_input_mmap_AWLEN = 32'd0;
assign m_axi_input_mmap_AWLOCK = 2'd0;
assign m_axi_input_mmap_AWPROT = 3'd0;
assign m_axi_input_mmap_AWQOS = 4'd0;
assign m_axi_input_mmap_AWREGION = 4'd0;
assign m_axi_input_mmap_AWSIZE = 3'd0;
assign m_axi_input_mmap_AWUSER = 1'd0;
assign m_axi_input_mmap_AWVALID = 1'b0;
assign m_axi_input_mmap_BREADY = 1'b0;
assign m_axi_input_mmap_WDATA = 512'd0;
assign m_axi_input_mmap_WID = 1'd0;
assign m_axi_input_mmap_WLAST = 1'b0;
assign m_axi_input_mmap_WSTRB = 64'd0;
assign m_axi_input_mmap_WUSER = 1'd0;
assign m_axi_input_mmap_WVALID = 1'b0;
assign or_ln2968_fu_243_p2 = (xor_ln2968_fu_237_p2 | ap_phi_mux_first_iter_0_phi_fu_135_p4);
assign select_ln235_fu_273_p3 = ((icmp_ln235_fu_232_p2[0:0] == 1'b1) ? add_ln235_fu_267_p2 : 32'd1);
assign select_ln2968_fu_255_p3 = ((icmp_ln235_fu_232_p2[0:0] == 1'b1) ? block_id_fu_80 : add_ln2968_1_fu_249_p2);
assign sext_ln235_fu_331_p1 = $signed(trunc_ln2_reg_415);
assign shl_ln_fu_305_p3 = {{trunc_ln234_reg_410}, {23'd0}};
assign trunc_ln234_fu_263_p1 = select_ln2968_fu_255_p3[3:0];
assign xor_ln2968_fu_237_p2 = (icmp_ln235_fu_232_p2 ^ 1'd1);
assign zext_ln150_fu_343_p1 = m_axi_input_mmap_RDATA;
assign zext_ln234_fu_312_p1 = shl_ln_fu_305_p3;
assign zext_ln2968_cast_fu_151_p1 = zext_ln2968;
always @ (posedge ap_clk) begin
    zext_ln2968_cast_reg_397[63:31] <= 33'b000000000000000000000000000000000;
end
endmodule