`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module Linear_Layer_i4xi4_q_dataflow_in_loop_weight_block_loop_Loop_init_block_AB_proc3 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        weight_stream_s_dout,
        weight_stream_s_empty_n,
        weight_stream_s_read,
        block_A_loader_din,
        block_A_loader_num_data_valid,
        block_A_loader_fifo_cap,
        block_A_loader_full_n,
        block_A_loader_write,
        block_B_loader_din,
        block_B_loader_num_data_valid,
        block_B_loader_fifo_cap,
        block_B_loader_full_n,
        block_B_loader_write,
        start_out,
        start_write,
        A_0_address0,
        A_0_ce0,
        A_0_q0,
        A_1_address0,
        A_1_ce0,
        A_1_q0,
        A_2_address0,
        A_2_ce0,
        A_2_q0,
        A_3_address0,
        A_3_ce0,
        A_3_q0,
        A_4_address0,
        A_4_ce0,
        A_4_q0,
        A_5_address0,
        A_5_ce0,
        A_5_q0,
        A_6_address0,
        A_6_ce0,
        A_6_q0,
        A_7_address0,
        A_7_ce0,
        A_7_q0,
        A_8_address0,
        A_8_ce0,
        A_8_q0,
        A_9_address0,
        A_9_ce0,
        A_9_q0,
        A_10_address0,
        A_10_ce0,
        A_10_q0,
        A_11_address0,
        A_11_ce0,
        A_11_q0,
        A_12_address0,
        A_12_ce0,
        A_12_q0,
        A_13_address0,
        A_13_ce0,
        A_13_q0,
        A_14_address0,
        A_14_ce0,
        A_14_q0,
        A_15_address0,
        A_15_ce0,
        A_15_q0
);
parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [128:0] weight_stream_s_dout;
input   weight_stream_s_empty_n;
output   weight_stream_s_read;
output  [63:0] block_A_loader_din;
input  [2:0] block_A_loader_num_data_valid;
input  [2:0] block_A_loader_fifo_cap;
input   block_A_loader_full_n;
output   block_A_loader_write;
output  [127:0] block_B_loader_din;
input  [2:0] block_B_loader_num_data_valid;
input  [2:0] block_B_loader_fifo_cap;
input   block_B_loader_full_n;
output   block_B_loader_write;
output   start_out;
output   start_write;
output  [10:0] A_0_address0;
output   A_0_ce0;
input  [3:0] A_0_q0;
output  [10:0] A_1_address0;
output   A_1_ce0;
input  [3:0] A_1_q0;
output  [10:0] A_2_address0;
output   A_2_ce0;
input  [3:0] A_2_q0;
output  [10:0] A_3_address0;
output   A_3_ce0;
input  [3:0] A_3_q0;
output  [10:0] A_4_address0;
output   A_4_ce0;
input  [3:0] A_4_q0;
output  [10:0] A_5_address0;
output   A_5_ce0;
input  [3:0] A_5_q0;
output  [10:0] A_6_address0;
output   A_6_ce0;
input  [3:0] A_6_q0;
output  [10:0] A_7_address0;
output   A_7_ce0;
input  [3:0] A_7_q0;
output  [10:0] A_8_address0;
output   A_8_ce0;
input  [3:0] A_8_q0;
output  [10:0] A_9_address0;
output   A_9_ce0;
input  [3:0] A_9_q0;
output  [10:0] A_10_address0;
output   A_10_ce0;
input  [3:0] A_10_q0;
output  [10:0] A_11_address0;
output   A_11_ce0;
input  [3:0] A_11_q0;
output  [10:0] A_12_address0;
output   A_12_ce0;
input  [3:0] A_12_q0;
output  [10:0] A_13_address0;
output   A_13_ce0;
input  [3:0] A_13_q0;
output  [10:0] A_14_address0;
output   A_14_ce0;
input  [3:0] A_14_q0;
output  [10:0] A_15_address0;
output   A_15_ce0;
input  [3:0] A_15_q0;
reg ap_idle;
reg start_write;
reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln2606_fu_432_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    block_A_loader_blk_n;
wire    ap_block_pp0_stage0;
reg    weight_stream_s_blk_n;
reg    block_B_loader_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [127:0] trunc_ln2609_fu_428_p1;
reg   [127:0] trunc_ln2609_reg_568;
reg   [127:0] trunc_ln2609_reg_568_pp0_iter1_reg;
reg   [3:0] A_0_load_reg_578;
reg   [3:0] A_1_load_reg_583;
reg   [3:0] A_2_load_reg_588;
reg   [3:0] A_3_load_reg_593;
reg   [3:0] A_4_load_reg_598;
reg   [3:0] A_5_load_reg_603;
reg   [3:0] A_6_load_reg_608;
reg   [3:0] A_7_load_reg_613;
reg   [3:0] A_8_load_reg_618;
reg   [3:0] A_9_load_reg_623;
reg   [3:0] A_10_load_reg_628;
reg   [3:0] A_11_load_reg_633;
reg   [3:0] A_12_load_reg_638;
reg   [3:0] A_13_load_reg_643;
reg   [3:0] A_14_load_reg_648;
reg   [3:0] A_15_load_reg_653;
wire   [63:0] zext_ln2606_fu_342_p1;
reg   [10:0] k93_fu_86;
wire   [10:0] k_fu_336_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_k93_load;
reg    weight_stream_s_read_local;
wire   [63:0] or_ln2608_s_fu_450_p17;
reg    ap_block_pp0_stage0_01001;
reg    block_A_loader_write_local;
reg    block_B_loader_write_local;
reg    A_0_ce0_local;
reg    A_1_ce0_local;
reg    A_2_ce0_local;
reg    A_3_ce0_local;
reg    A_4_ce0_local;
reg    A_5_ce0_local;
reg    A_6_ce0_local;
reg    A_7_ce0_local;
reg    A_8_ce0_local;
reg    A_9_ce0_local;
reg    A_10_ce0_local;
reg    A_11_ce0_local;
reg    A_12_ce0_local;
reg    A_13_ce0_local;
reg    A_14_ce0_local;
reg    A_15_ce0_local;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_done_sig;
reg    ap_condition_283;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 k93_fu_86 = 11'd0;
end
Linear_Layer_i4xi4_q_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end
always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_283)) begin
        k93_fu_86 <= k_fu_336_p2;
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_0_load_reg_578 <= A_0_q0;
        A_10_load_reg_628 <= A_10_q0;
        A_11_load_reg_633 <= A_11_q0;
        A_12_load_reg_638 <= A_12_q0;
        A_13_load_reg_643 <= A_13_q0;
        A_14_load_reg_648 <= A_14_q0;
        A_15_load_reg_653 <= A_15_q0;
        A_1_load_reg_583 <= A_1_q0;
        A_2_load_reg_588 <= A_2_q0;
        A_3_load_reg_593 <= A_3_q0;
        A_4_load_reg_598 <= A_4_q0;
        A_5_load_reg_603 <= A_5_q0;
        A_6_load_reg_608 <= A_6_q0;
        A_7_load_reg_613 <= A_7_q0;
        A_8_load_reg_618 <= A_8_q0;
        A_9_load_reg_623 <= A_9_q0;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        trunc_ln2609_reg_568 <= trunc_ln2609_fu_428_p1;
        trunc_ln2609_reg_568_pp0_iter1_reg <= trunc_ln2609_reg_568;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_0_ce0_local = 1'b1;
    end else begin
        A_0_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_10_ce0_local = 1'b1;
    end else begin
        A_10_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_11_ce0_local = 1'b1;
    end else begin
        A_11_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_12_ce0_local = 1'b1;
    end else begin
        A_12_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_13_ce0_local = 1'b1;
    end else begin
        A_13_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_14_ce0_local = 1'b1;
    end else begin
        A_14_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_15_ce0_local = 1'b1;
    end else begin
        A_15_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_1_ce0_local = 1'b1;
    end else begin
        A_1_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_2_ce0_local = 1'b1;
    end else begin
        A_2_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_3_ce0_local = 1'b1;
    end else begin
        A_3_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_4_ce0_local = 1'b1;
    end else begin
        A_4_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_5_ce0_local = 1'b1;
    end else begin
        A_5_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_6_ce0_local = 1'b1;
    end else begin
        A_6_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_7_ce0_local = 1'b1;
    end else begin
        A_7_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_8_ce0_local = 1'b1;
    end else begin
        A_8_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_9_ce0_local = 1'b1;
    end else begin
        A_9_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln2606_fu_432_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end
always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k93_load = 11'd0;
    end else begin
        ap_sig_allocacmp_k93_load = k93_fu_86;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        block_A_loader_blk_n = block_A_loader_full_n;
    end else begin
        block_A_loader_blk_n = 1'b1;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        block_A_loader_write_local = 1'b1;
    end else begin
        block_A_loader_write_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        block_B_loader_blk_n = block_B_loader_full_n;
    end else begin
        block_B_loader_blk_n = 1'b1;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        block_B_loader_write_local = 1'b1;
    end else begin
        block_B_loader_write_local = 1'b0;
    end
end
always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end
always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_done_reg == 1'b0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_stream_s_blk_n = weight_stream_s_empty_n;
    end else begin
        weight_stream_s_blk_n = 1'b1;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weight_stream_s_read_local = 1'b1;
    end else begin
        weight_stream_s_read_local = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign A_0_address0 = zext_ln2606_fu_342_p1;
assign A_0_ce0 = A_0_ce0_local;
assign A_10_address0 = zext_ln2606_fu_342_p1;
assign A_10_ce0 = A_10_ce0_local;
assign A_11_address0 = zext_ln2606_fu_342_p1;
assign A_11_ce0 = A_11_ce0_local;
assign A_12_address0 = zext_ln2606_fu_342_p1;
assign A_12_ce0 = A_12_ce0_local;
assign A_13_address0 = zext_ln2606_fu_342_p1;
assign A_13_ce0 = A_13_ce0_local;
assign A_14_address0 = zext_ln2606_fu_342_p1;
assign A_14_ce0 = A_14_ce0_local;
assign A_15_address0 = zext_ln2606_fu_342_p1;
assign A_15_ce0 = A_15_ce0_local;
assign A_1_address0 = zext_ln2606_fu_342_p1;
assign A_1_ce0 = A_1_ce0_local;
assign A_2_address0 = zext_ln2606_fu_342_p1;
assign A_2_ce0 = A_2_ce0_local;
assign A_3_address0 = zext_ln2606_fu_342_p1;
assign A_3_ce0 = A_3_ce0_local;
assign A_4_address0 = zext_ln2606_fu_342_p1;
assign A_4_ce0 = A_4_ce0_local;
assign A_5_address0 = zext_ln2606_fu_342_p1;
assign A_5_ce0 = A_5_ce0_local;
assign A_6_address0 = zext_ln2606_fu_342_p1;
assign A_6_ce0 = A_6_ce0_local;
assign A_7_address0 = zext_ln2606_fu_342_p1;
assign A_7_ce0 = A_7_ce0_local;
assign A_8_address0 = zext_ln2606_fu_342_p1;
assign A_8_ce0 = A_8_ce0_local;
assign A_9_address0 = zext_ln2606_fu_342_p1;
assign A_9_ce0 = A_9_ce0_local;
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end
always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end
always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end
always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | (weight_stream_s_empty_n == 1'b0));
end
always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((block_B_loader_full_n == 1'b0) | (block_A_loader_full_n == 1'b0));
end
always @ (*) begin
    ap_condition_283 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end
assign ap_done = ap_done_sig;
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_enable_reg_pp0_iter0 = ap_start_int;
assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;
assign ap_ready = internal_ap_ready;
assign block_A_loader_din = or_ln2608_s_fu_450_p17;
assign block_A_loader_write = block_A_loader_write_local;
assign block_B_loader_din = trunc_ln2609_reg_568_pp0_iter1_reg;
assign block_B_loader_write = block_B_loader_write_local;
assign icmp_ln2606_fu_432_p2 = ((ap_sig_allocacmp_k93_load == 11'd2047) ? 1'b1 : 1'b0);
assign k_fu_336_p2 = (ap_sig_allocacmp_k93_load + 11'd1);
assign or_ln2608_s_fu_450_p17 = {{{{{{{{{{{{{{{{A_15_load_reg_653}, {A_14_load_reg_648}}, {A_13_load_reg_643}}, {A_12_load_reg_638}}, {A_11_load_reg_633}}, {A_10_load_reg_628}}, {A_9_load_reg_623}}, {A_8_load_reg_618}}, {A_7_load_reg_613}}, {A_6_load_reg_608}}, {A_5_load_reg_603}}, {A_4_load_reg_598}}, {A_3_load_reg_593}}, {A_2_load_reg_588}}, {A_1_load_reg_583}}, {A_0_load_reg_578}};
assign start_out = real_start;
assign trunc_ln2609_fu_428_p1 = weight_stream_s_dout[127:0];
assign weight_stream_s_read = weight_stream_s_read_local;
assign zext_ln2606_fu_342_p1 = ap_sig_allocacmp_k93_load;
endmodule