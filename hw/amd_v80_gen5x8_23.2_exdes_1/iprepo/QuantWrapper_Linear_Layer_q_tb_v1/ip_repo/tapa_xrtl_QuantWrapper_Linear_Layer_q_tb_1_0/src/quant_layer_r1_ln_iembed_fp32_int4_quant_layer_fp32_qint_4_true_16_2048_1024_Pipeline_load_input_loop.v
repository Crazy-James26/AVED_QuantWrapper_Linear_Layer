`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module quant_layer_r1_ln_iembed_fp32_int4_quant_layer_fp32_qint_4_true_16_2048_1024_Pipeline_load_input_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_stream_s_dout,
        input_stream_s_empty_n,
        input_stream_s_read,
        input_buffer_15_address1,
        input_buffer_15_ce1,
        input_buffer_15_we1,
        input_buffer_15_d1,
        input_buffer_14_address1,
        input_buffer_14_ce1,
        input_buffer_14_we1,
        input_buffer_14_d1,
        input_buffer_13_address1,
        input_buffer_13_ce1,
        input_buffer_13_we1,
        input_buffer_13_d1,
        input_buffer_12_address1,
        input_buffer_12_ce1,
        input_buffer_12_we1,
        input_buffer_12_d1,
        input_buffer_11_address1,
        input_buffer_11_ce1,
        input_buffer_11_we1,
        input_buffer_11_d1,
        input_buffer_10_address1,
        input_buffer_10_ce1,
        input_buffer_10_we1,
        input_buffer_10_d1,
        input_buffer_9_address1,
        input_buffer_9_ce1,
        input_buffer_9_we1,
        input_buffer_9_d1,
        input_buffer_8_address1,
        input_buffer_8_ce1,
        input_buffer_8_we1,
        input_buffer_8_d1,
        input_buffer_7_address1,
        input_buffer_7_ce1,
        input_buffer_7_we1,
        input_buffer_7_d1,
        input_buffer_6_address1,
        input_buffer_6_ce1,
        input_buffer_6_we1,
        input_buffer_6_d1,
        input_buffer_5_address1,
        input_buffer_5_ce1,
        input_buffer_5_we1,
        input_buffer_5_d1,
        input_buffer_4_address1,
        input_buffer_4_ce1,
        input_buffer_4_we1,
        input_buffer_4_d1,
        input_buffer_3_address1,
        input_buffer_3_ce1,
        input_buffer_3_we1,
        input_buffer_3_d1,
        input_buffer_2_address1,
        input_buffer_2_ce1,
        input_buffer_2_we1,
        input_buffer_2_d1,
        input_buffer_1_address1,
        input_buffer_1_ce1,
        input_buffer_1_we1,
        input_buffer_1_d1,
        input_buffer_address1,
        input_buffer_ce1,
        input_buffer_we1,
        input_buffer_d1,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        p_out2,
        p_out2_ap_vld,
        p_out3,
        p_out3_ap_vld,
        p_out4,
        p_out4_ap_vld,
        p_out5,
        p_out5_ap_vld,
        p_out6,
        p_out6_ap_vld,
        p_out7,
        p_out7_ap_vld,
        p_out8,
        p_out8_ap_vld,
        p_out9,
        p_out9_ap_vld,
        p_out10,
        p_out10_ap_vld,
        p_out11,
        p_out11_ap_vld,
        p_out12,
        p_out12_ap_vld,
        p_out13,
        p_out13_ap_vld,
        p_out14,
        p_out14_ap_vld,
        p_out15,
        p_out15_ap_vld,
        p_out16,
        p_out16_ap_vld,
        p_out17,
        p_out17_ap_vld,
        p_out18,
        p_out18_ap_vld,
        p_out19,
        p_out19_ap_vld,
        p_out20,
        p_out20_ap_vld,
        p_out21,
        p_out21_ap_vld,
        p_out22,
        p_out22_ap_vld,
        p_out23,
        p_out23_ap_vld,
        p_out24,
        p_out24_ap_vld,
        p_out25,
        p_out25_ap_vld,
        p_out26,
        p_out26_ap_vld,
        p_out27,
        p_out27_ap_vld,
        p_out28,
        p_out28_ap_vld,
        p_out29,
        p_out29_ap_vld,
        p_out30,
        p_out30_ap_vld,
        p_out31,
        p_out31_ap_vld
);
parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [512:0] input_stream_s_dout;
input   input_stream_s_empty_n;
output   input_stream_s_read;
output  [10:0] input_buffer_15_address1;
output   input_buffer_15_ce1;
output   input_buffer_15_we1;
output  [31:0] input_buffer_15_d1;
output  [10:0] input_buffer_14_address1;
output   input_buffer_14_ce1;
output   input_buffer_14_we1;
output  [31:0] input_buffer_14_d1;
output  [10:0] input_buffer_13_address1;
output   input_buffer_13_ce1;
output   input_buffer_13_we1;
output  [31:0] input_buffer_13_d1;
output  [10:0] input_buffer_12_address1;
output   input_buffer_12_ce1;
output   input_buffer_12_we1;
output  [31:0] input_buffer_12_d1;
output  [10:0] input_buffer_11_address1;
output   input_buffer_11_ce1;
output   input_buffer_11_we1;
output  [31:0] input_buffer_11_d1;
output  [10:0] input_buffer_10_address1;
output   input_buffer_10_ce1;
output   input_buffer_10_we1;
output  [31:0] input_buffer_10_d1;
output  [10:0] input_buffer_9_address1;
output   input_buffer_9_ce1;
output   input_buffer_9_we1;
output  [31:0] input_buffer_9_d1;
output  [10:0] input_buffer_8_address1;
output   input_buffer_8_ce1;
output   input_buffer_8_we1;
output  [31:0] input_buffer_8_d1;
output  [10:0] input_buffer_7_address1;
output   input_buffer_7_ce1;
output   input_buffer_7_we1;
output  [31:0] input_buffer_7_d1;
output  [10:0] input_buffer_6_address1;
output   input_buffer_6_ce1;
output   input_buffer_6_we1;
output  [31:0] input_buffer_6_d1;
output  [10:0] input_buffer_5_address1;
output   input_buffer_5_ce1;
output   input_buffer_5_we1;
output  [31:0] input_buffer_5_d1;
output  [10:0] input_buffer_4_address1;
output   input_buffer_4_ce1;
output   input_buffer_4_we1;
output  [31:0] input_buffer_4_d1;
output  [10:0] input_buffer_3_address1;
output   input_buffer_3_ce1;
output   input_buffer_3_we1;
output  [31:0] input_buffer_3_d1;
output  [10:0] input_buffer_2_address1;
output   input_buffer_2_ce1;
output   input_buffer_2_we1;
output  [31:0] input_buffer_2_d1;
output  [10:0] input_buffer_1_address1;
output   input_buffer_1_ce1;
output   input_buffer_1_we1;
output  [31:0] input_buffer_1_d1;
output  [10:0] input_buffer_address1;
output   input_buffer_ce1;
output   input_buffer_we1;
output  [31:0] input_buffer_d1;
output  [31:0] p_out;
output   p_out_ap_vld;
output  [31:0] p_out1;
output   p_out1_ap_vld;
output  [31:0] p_out2;
output   p_out2_ap_vld;
output  [31:0] p_out3;
output   p_out3_ap_vld;
output  [31:0] p_out4;
output   p_out4_ap_vld;
output  [31:0] p_out5;
output   p_out5_ap_vld;
output  [31:0] p_out6;
output   p_out6_ap_vld;
output  [31:0] p_out7;
output   p_out7_ap_vld;
output  [31:0] p_out8;
output   p_out8_ap_vld;
output  [31:0] p_out9;
output   p_out9_ap_vld;
output  [31:0] p_out10;
output   p_out10_ap_vld;
output  [31:0] p_out11;
output   p_out11_ap_vld;
output  [31:0] p_out12;
output   p_out12_ap_vld;
output  [31:0] p_out13;
output   p_out13_ap_vld;
output  [31:0] p_out14;
output   p_out14_ap_vld;
output  [31:0] p_out15;
output   p_out15_ap_vld;
output  [31:0] p_out16;
output   p_out16_ap_vld;
output  [31:0] p_out17;
output   p_out17_ap_vld;
output  [31:0] p_out18;
output   p_out18_ap_vld;
output  [31:0] p_out19;
output   p_out19_ap_vld;
output  [31:0] p_out20;
output   p_out20_ap_vld;
output  [31:0] p_out21;
output   p_out21_ap_vld;
output  [31:0] p_out22;
output   p_out22_ap_vld;
output  [31:0] p_out23;
output   p_out23_ap_vld;
output  [31:0] p_out24;
output   p_out24_ap_vld;
output  [31:0] p_out25;
output   p_out25_ap_vld;
output  [31:0] p_out26;
output   p_out26_ap_vld;
output  [31:0] p_out27;
output   p_out27_ap_vld;
output  [31:0] p_out28;
output   p_out28_ap_vld;
output  [31:0] p_out29;
output   p_out29_ap_vld;
output  [31:0] p_out30;
output   p_out30_ap_vld;
output  [31:0] p_out31;
output   p_out31_ap_vld;
reg ap_idle;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg p_out2_ap_vld;
reg p_out3_ap_vld;
reg p_out4_ap_vld;
reg p_out5_ap_vld;
reg p_out6_ap_vld;
reg p_out7_ap_vld;
reg p_out8_ap_vld;
reg p_out9_ap_vld;
reg p_out10_ap_vld;
reg p_out11_ap_vld;
reg p_out12_ap_vld;
reg p_out13_ap_vld;
reg p_out14_ap_vld;
reg p_out15_ap_vld;
reg p_out16_ap_vld;
reg p_out17_ap_vld;
reg p_out18_ap_vld;
reg p_out19_ap_vld;
reg p_out20_ap_vld;
reg p_out21_ap_vld;
reg p_out22_ap_vld;
reg p_out23_ap_vld;
reg p_out24_ap_vld;
reg p_out25_ap_vld;
reg p_out26_ap_vld;
reg p_out27_ap_vld;
reg p_out28_ap_vld;
reg p_out29_ap_vld;
reg p_out30_ap_vld;
reg p_out31_ap_vld;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln795_fu_1992_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    input_stream_s_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [11:0] k_1_reg_7325;
reg   [0:0] icmp_ln795_reg_7330;
reg   [31:0] p_load161_reg_7334;
reg   [31:0] p_load160_reg_7341;
reg   [31:0] p_load159_reg_7348;
reg   [31:0] p_load158_reg_7355;
reg   [31:0] p_load157_reg_7362;
reg   [31:0] p_load156_reg_7369;
reg   [31:0] p_load155_reg_7376;
reg   [31:0] p_load154_reg_7383;
reg   [31:0] p_load153_reg_7390;
reg   [31:0] p_load152_reg_7397;
reg   [31:0] p_load151_reg_7404;
reg   [31:0] p_load150_reg_7411;
reg   [31:0] p_load149_reg_7418;
reg   [31:0] p_load148_reg_7425;
reg   [31:0] p_load147_reg_7432;
reg   [31:0] p_load146_reg_7439;
reg   [31:0] p_load145_reg_7446;
reg   [31:0] p_load144_reg_7453;
reg   [31:0] p_load143_reg_7460;
reg   [31:0] p_load142_reg_7467;
reg   [31:0] p_load141_reg_7474;
reg   [31:0] p_load140_reg_7481;
reg   [31:0] p_load139_reg_7488;
reg   [31:0] p_load138_reg_7495;
reg   [31:0] p_load137_reg_7502;
reg   [31:0] p_load136_reg_7509;
reg   [31:0] p_load135_reg_7516;
reg   [31:0] p_load134_reg_7523;
reg   [31:0] p_load133_reg_7530;
reg   [31:0] p_load132_reg_7537;
reg   [31:0] p_load131_reg_7544;
reg   [31:0] p_load130_reg_7551;
wire   [31:0] bitcast_ln91_fu_2377_p1;
reg   [31:0] bitcast_ln91_reg_7558;
wire   [31:0] bitcast_ln91_1_fu_2382_p1;
reg   [31:0] bitcast_ln91_1_reg_7570;
wire   [31:0] bitcast_ln91_2_fu_2387_p1;
reg   [31:0] bitcast_ln91_2_reg_7582;
wire   [31:0] bitcast_ln91_3_fu_2392_p1;
reg   [31:0] bitcast_ln91_3_reg_7594;
wire   [31:0] bitcast_ln91_4_fu_2397_p1;
reg   [31:0] bitcast_ln91_4_reg_7606;
wire   [31:0] bitcast_ln91_5_fu_2402_p1;
reg   [31:0] bitcast_ln91_5_reg_7618;
wire   [31:0] bitcast_ln91_6_fu_2407_p1;
reg   [31:0] bitcast_ln91_6_reg_7630;
wire   [31:0] bitcast_ln91_7_fu_2412_p1;
reg   [31:0] bitcast_ln91_7_reg_7642;
wire   [31:0] bitcast_ln91_8_fu_2417_p1;
reg   [31:0] bitcast_ln91_8_reg_7654;
wire   [31:0] bitcast_ln91_9_fu_2422_p1;
reg   [31:0] bitcast_ln91_9_reg_7666;
wire   [31:0] bitcast_ln91_10_fu_2427_p1;
reg   [31:0] bitcast_ln91_10_reg_7678;
wire   [31:0] bitcast_ln91_11_fu_2432_p1;
reg   [31:0] bitcast_ln91_11_reg_7690;
wire   [31:0] bitcast_ln91_12_fu_2437_p1;
reg   [31:0] bitcast_ln91_12_reg_7702;
wire   [31:0] bitcast_ln91_13_fu_2442_p1;
reg   [31:0] bitcast_ln91_13_reg_7714;
wire   [31:0] bitcast_ln91_14_fu_2447_p1;
reg   [31:0] bitcast_ln91_14_reg_7726;
wire   [31:0] bitcast_ln91_15_fu_2452_p1;
reg   [31:0] bitcast_ln91_15_reg_7738;
wire   [0:0] or_ln800_fu_2501_p2;
reg   [0:0] or_ln800_reg_7750;
wire   [0:0] icmp_ln800_2_fu_2507_p2;
reg   [0:0] icmp_ln800_2_reg_7756;
wire   [0:0] icmp_ln800_3_fu_2513_p2;
reg   [0:0] icmp_ln800_3_reg_7761;
wire   [0:0] icmp_ln803_fu_2545_p2;
reg   [0:0] icmp_ln803_reg_7766;
wire   [0:0] icmp_ln803_1_fu_2551_p2;
reg   [0:0] icmp_ln803_1_reg_7771;
wire   [0:0] or_ln800_2_fu_2615_p2;
reg   [0:0] or_ln800_2_reg_7776;
wire   [0:0] icmp_ln800_6_fu_2621_p2;
reg   [0:0] icmp_ln800_6_reg_7782;
wire   [0:0] icmp_ln800_7_fu_2627_p2;
reg   [0:0] icmp_ln800_7_reg_7787;
wire   [0:0] icmp_ln803_2_fu_2659_p2;
reg   [0:0] icmp_ln803_2_reg_7792;
wire   [0:0] icmp_ln803_3_fu_2665_p2;
reg   [0:0] icmp_ln803_3_reg_7797;
wire   [0:0] or_ln800_4_fu_2729_p2;
reg   [0:0] or_ln800_4_reg_7802;
wire   [0:0] icmp_ln800_10_fu_2735_p2;
reg   [0:0] icmp_ln800_10_reg_7808;
wire   [0:0] icmp_ln800_11_fu_2741_p2;
reg   [0:0] icmp_ln800_11_reg_7813;
wire   [0:0] icmp_ln803_4_fu_2773_p2;
reg   [0:0] icmp_ln803_4_reg_7818;
wire   [0:0] icmp_ln803_5_fu_2779_p2;
reg   [0:0] icmp_ln803_5_reg_7823;
wire   [0:0] or_ln800_6_fu_2843_p2;
reg   [0:0] or_ln800_6_reg_7828;
wire   [0:0] icmp_ln800_14_fu_2849_p2;
reg   [0:0] icmp_ln800_14_reg_7834;
wire   [0:0] icmp_ln800_15_fu_2855_p2;
reg   [0:0] icmp_ln800_15_reg_7839;
wire   [0:0] icmp_ln803_6_fu_2887_p2;
reg   [0:0] icmp_ln803_6_reg_7844;
wire   [0:0] icmp_ln803_7_fu_2893_p2;
reg   [0:0] icmp_ln803_7_reg_7849;
wire   [0:0] or_ln800_8_fu_2957_p2;
reg   [0:0] or_ln800_8_reg_7854;
wire   [0:0] icmp_ln800_18_fu_2963_p2;
reg   [0:0] icmp_ln800_18_reg_7860;
wire   [0:0] icmp_ln800_19_fu_2969_p2;
reg   [0:0] icmp_ln800_19_reg_7865;
wire   [0:0] icmp_ln803_8_fu_3001_p2;
reg   [0:0] icmp_ln803_8_reg_7870;
wire   [0:0] icmp_ln803_9_fu_3007_p2;
reg   [0:0] icmp_ln803_9_reg_7875;
wire   [0:0] or_ln800_10_fu_3071_p2;
reg   [0:0] or_ln800_10_reg_7880;
wire   [0:0] icmp_ln800_22_fu_3077_p2;
reg   [0:0] icmp_ln800_22_reg_7886;
wire   [0:0] icmp_ln800_23_fu_3083_p2;
reg   [0:0] icmp_ln800_23_reg_7891;
wire   [0:0] icmp_ln803_10_fu_3115_p2;
reg   [0:0] icmp_ln803_10_reg_7896;
wire   [0:0] icmp_ln803_11_fu_3121_p2;
reg   [0:0] icmp_ln803_11_reg_7901;
wire   [0:0] or_ln800_12_fu_3185_p2;
reg   [0:0] or_ln800_12_reg_7906;
wire   [0:0] icmp_ln800_26_fu_3191_p2;
reg   [0:0] icmp_ln800_26_reg_7912;
wire   [0:0] icmp_ln800_27_fu_3197_p2;
reg   [0:0] icmp_ln800_27_reg_7917;
wire   [0:0] icmp_ln803_12_fu_3229_p2;
reg   [0:0] icmp_ln803_12_reg_7922;
wire   [0:0] icmp_ln803_13_fu_3235_p2;
reg   [0:0] icmp_ln803_13_reg_7927;
wire   [0:0] or_ln800_14_fu_3299_p2;
reg   [0:0] or_ln800_14_reg_7932;
wire   [0:0] icmp_ln800_30_fu_3305_p2;
reg   [0:0] icmp_ln800_30_reg_7938;
wire   [0:0] icmp_ln800_31_fu_3311_p2;
reg   [0:0] icmp_ln800_31_reg_7943;
wire   [0:0] icmp_ln803_14_fu_3343_p2;
reg   [0:0] icmp_ln803_14_reg_7948;
wire   [0:0] icmp_ln803_15_fu_3349_p2;
reg   [0:0] icmp_ln803_15_reg_7953;
wire   [0:0] or_ln800_16_fu_3413_p2;
reg   [0:0] or_ln800_16_reg_7958;
wire   [0:0] icmp_ln800_34_fu_3419_p2;
reg   [0:0] icmp_ln800_34_reg_7964;
wire   [0:0] icmp_ln800_35_fu_3425_p2;
reg   [0:0] icmp_ln800_35_reg_7969;
wire   [0:0] icmp_ln803_16_fu_3457_p2;
reg   [0:0] icmp_ln803_16_reg_7974;
wire   [0:0] icmp_ln803_17_fu_3463_p2;
reg   [0:0] icmp_ln803_17_reg_7979;
wire   [0:0] or_ln800_18_fu_3527_p2;
reg   [0:0] or_ln800_18_reg_7984;
wire   [0:0] icmp_ln800_38_fu_3533_p2;
reg   [0:0] icmp_ln800_38_reg_7990;
wire   [0:0] icmp_ln800_39_fu_3539_p2;
reg   [0:0] icmp_ln800_39_reg_7995;
wire   [0:0] icmp_ln803_18_fu_3571_p2;
reg   [0:0] icmp_ln803_18_reg_8000;
wire   [0:0] icmp_ln803_19_fu_3577_p2;
reg   [0:0] icmp_ln803_19_reg_8005;
wire   [0:0] or_ln800_20_fu_3641_p2;
reg   [0:0] or_ln800_20_reg_8010;
wire   [0:0] icmp_ln800_42_fu_3647_p2;
reg   [0:0] icmp_ln800_42_reg_8016;
wire   [0:0] icmp_ln800_43_fu_3653_p2;
reg   [0:0] icmp_ln800_43_reg_8021;
wire   [0:0] icmp_ln803_20_fu_3685_p2;
reg   [0:0] icmp_ln803_20_reg_8026;
wire   [0:0] icmp_ln803_21_fu_3691_p2;
reg   [0:0] icmp_ln803_21_reg_8031;
wire   [0:0] or_ln800_22_fu_3755_p2;
reg   [0:0] or_ln800_22_reg_8036;
wire   [0:0] icmp_ln800_46_fu_3761_p2;
reg   [0:0] icmp_ln800_46_reg_8042;
wire   [0:0] icmp_ln800_47_fu_3767_p2;
reg   [0:0] icmp_ln800_47_reg_8047;
wire   [0:0] icmp_ln803_22_fu_3799_p2;
reg   [0:0] icmp_ln803_22_reg_8052;
wire   [0:0] icmp_ln803_23_fu_3805_p2;
reg   [0:0] icmp_ln803_23_reg_8057;
wire   [0:0] or_ln800_24_fu_3869_p2;
reg   [0:0] or_ln800_24_reg_8062;
wire   [0:0] icmp_ln800_50_fu_3875_p2;
reg   [0:0] icmp_ln800_50_reg_8068;
wire   [0:0] icmp_ln800_51_fu_3881_p2;
reg   [0:0] icmp_ln800_51_reg_8073;
wire   [0:0] icmp_ln803_24_fu_3913_p2;
reg   [0:0] icmp_ln803_24_reg_8078;
wire   [0:0] icmp_ln803_25_fu_3919_p2;
reg   [0:0] icmp_ln803_25_reg_8083;
wire   [0:0] or_ln800_26_fu_3983_p2;
reg   [0:0] or_ln800_26_reg_8088;
wire   [0:0] icmp_ln800_54_fu_3989_p2;
reg   [0:0] icmp_ln800_54_reg_8094;
wire   [0:0] icmp_ln800_55_fu_3995_p2;
reg   [0:0] icmp_ln800_55_reg_8099;
wire   [0:0] icmp_ln803_26_fu_4027_p2;
reg   [0:0] icmp_ln803_26_reg_8104;
wire   [0:0] icmp_ln803_27_fu_4033_p2;
reg   [0:0] icmp_ln803_27_reg_8109;
wire   [0:0] or_ln800_28_fu_4097_p2;
reg   [0:0] or_ln800_28_reg_8114;
wire   [0:0] icmp_ln800_58_fu_4103_p2;
reg   [0:0] icmp_ln800_58_reg_8120;
wire   [0:0] icmp_ln800_59_fu_4109_p2;
reg   [0:0] icmp_ln800_59_reg_8125;
wire   [0:0] icmp_ln803_28_fu_4141_p2;
reg   [0:0] icmp_ln803_28_reg_8130;
wire   [0:0] icmp_ln803_29_fu_4147_p2;
reg   [0:0] icmp_ln803_29_reg_8135;
wire   [0:0] or_ln800_30_fu_4339_p2;
reg   [0:0] or_ln800_30_reg_8140;
wire   [0:0] icmp_ln800_62_fu_4345_p2;
reg   [0:0] icmp_ln800_62_reg_8146;
wire   [0:0] icmp_ln800_63_fu_4351_p2;
reg   [0:0] icmp_ln800_63_reg_8151;
wire   [0:0] icmp_ln803_30_fu_4383_p2;
reg   [0:0] icmp_ln803_30_reg_8156;
wire   [0:0] icmp_ln803_31_fu_4389_p2;
reg   [0:0] icmp_ln803_31_reg_8161;
wire   [63:0] zext_ln795_fu_2202_p1;
reg   [31:0] empty_fu_310;
wire   [31:0] select_ln800_fu_4617_p3;
reg   [31:0] ap_sig_allocacmp_p_load161;
wire    ap_loop_init;
reg   [31:0] empty_21_fu_314;
wire   [31:0] select_ln803_fu_4645_p3;
reg   [31:0] ap_sig_allocacmp_p_load160;
reg   [31:0] empty_22_fu_318;
wire   [31:0] select_ln800_2_fu_4673_p3;
reg   [31:0] ap_sig_allocacmp_p_load159;
reg   [31:0] empty_23_fu_322;
wire   [31:0] select_ln803_2_fu_4701_p3;
reg   [31:0] ap_sig_allocacmp_p_load158;
reg   [31:0] empty_24_fu_326;
wire   [31:0] select_ln800_4_fu_4729_p3;
reg   [31:0] ap_sig_allocacmp_p_load157;
reg   [31:0] empty_25_fu_330;
wire   [31:0] select_ln803_4_fu_4757_p3;
reg   [31:0] ap_sig_allocacmp_p_load156;
reg   [31:0] empty_26_fu_334;
wire   [31:0] select_ln800_6_fu_4785_p3;
reg   [31:0] ap_sig_allocacmp_p_load155;
reg   [31:0] empty_27_fu_338;
wire   [31:0] select_ln803_6_fu_4813_p3;
reg   [31:0] ap_sig_allocacmp_p_load154;
reg   [31:0] empty_28_fu_342;
wire   [31:0] select_ln800_8_fu_4841_p3;
reg   [31:0] ap_sig_allocacmp_p_load153;
reg   [31:0] empty_29_fu_346;
wire   [31:0] select_ln803_8_fu_4869_p3;
reg   [31:0] ap_sig_allocacmp_p_load152;
reg   [31:0] empty_30_fu_350;
wire   [31:0] select_ln800_10_fu_4897_p3;
reg   [31:0] ap_sig_allocacmp_p_load151;
reg   [31:0] empty_31_fu_354;
wire   [31:0] select_ln803_10_fu_4925_p3;
reg   [31:0] ap_sig_allocacmp_p_load150;
reg   [31:0] empty_32_fu_358;
wire   [31:0] select_ln800_12_fu_4953_p3;
reg   [31:0] ap_sig_allocacmp_p_load149;
reg   [31:0] empty_33_fu_362;
wire   [31:0] select_ln803_12_fu_4981_p3;
reg   [31:0] ap_sig_allocacmp_p_load148;
reg   [31:0] empty_34_fu_366;
wire   [31:0] select_ln800_14_fu_5009_p3;
reg   [31:0] ap_sig_allocacmp_p_load147;
reg   [31:0] empty_35_fu_370;
wire   [31:0] select_ln803_14_fu_5037_p3;
reg   [31:0] ap_sig_allocacmp_p_load146;
reg   [31:0] empty_36_fu_374;
wire   [31:0] select_ln800_16_fu_5065_p3;
reg   [31:0] ap_sig_allocacmp_p_load145;
reg   [31:0] empty_37_fu_378;
wire   [31:0] select_ln803_16_fu_5093_p3;
reg   [31:0] ap_sig_allocacmp_p_load144;
reg   [31:0] empty_38_fu_382;
wire   [31:0] select_ln800_18_fu_5121_p3;
reg   [31:0] ap_sig_allocacmp_p_load143;
reg   [31:0] empty_39_fu_386;
wire   [31:0] select_ln803_18_fu_5149_p3;
reg   [31:0] ap_sig_allocacmp_p_load142;
reg   [31:0] empty_40_fu_390;
wire   [31:0] select_ln800_20_fu_5177_p3;
reg   [31:0] ap_sig_allocacmp_p_load141;
reg   [31:0] empty_41_fu_394;
wire   [31:0] select_ln803_20_fu_5205_p3;
reg   [31:0] ap_sig_allocacmp_p_load140;
reg   [31:0] empty_42_fu_398;
wire   [31:0] select_ln800_22_fu_5233_p3;
reg   [31:0] ap_sig_allocacmp_p_load139;
reg   [31:0] empty_43_fu_402;
wire   [31:0] select_ln803_22_fu_5261_p3;
reg   [31:0] ap_sig_allocacmp_p_load138;
reg   [31:0] empty_44_fu_406;
wire   [31:0] select_ln800_24_fu_5289_p3;
reg   [31:0] ap_sig_allocacmp_p_load137;
reg   [31:0] empty_45_fu_410;
wire   [31:0] select_ln803_24_fu_5317_p3;
reg   [31:0] ap_sig_allocacmp_p_load136;
reg   [31:0] empty_46_fu_414;
wire   [31:0] select_ln800_26_fu_5345_p3;
reg   [31:0] ap_sig_allocacmp_p_load135;
reg   [31:0] empty_47_fu_418;
wire   [31:0] select_ln803_26_fu_5373_p3;
reg   [31:0] ap_sig_allocacmp_p_load134;
reg   [31:0] empty_48_fu_422;
wire   [31:0] select_ln800_28_fu_5401_p3;
reg   [31:0] ap_sig_allocacmp_p_load133;
reg   [31:0] empty_49_fu_426;
wire   [31:0] select_ln803_28_fu_5429_p3;
reg   [31:0] ap_sig_allocacmp_p_load132;
reg   [31:0] empty_50_fu_430;
wire   [31:0] select_ln800_30_fu_5457_p3;
reg   [31:0] ap_sig_allocacmp_p_load131;
reg   [31:0] empty_51_fu_434;
wire   [31:0] select_ln803_30_fu_5485_p3;
reg   [31:0] ap_sig_allocacmp_p_load130;
reg   [31:0] empty_52_fu_438;
wire   [31:0] input_max_fu_4610_p3;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [31:0] empty_53_fu_442;
wire   [31:0] input_min_fu_4638_p3;
reg   [31:0] empty_54_fu_446;
wire   [31:0] input_max_1_fu_4666_p3;
reg   [31:0] empty_55_fu_450;
wire   [31:0] input_min_1_fu_4694_p3;
reg   [31:0] empty_56_fu_454;
wire   [31:0] input_max_2_fu_4722_p3;
reg   [31:0] empty_57_fu_458;
wire   [31:0] input_min_2_fu_4750_p3;
reg   [31:0] empty_58_fu_462;
wire   [31:0] input_max_3_fu_4778_p3;
reg   [31:0] empty_59_fu_466;
wire   [31:0] input_min_3_fu_4806_p3;
reg   [31:0] empty_60_fu_470;
wire   [31:0] input_max_4_fu_4834_p3;
reg   [31:0] empty_61_fu_474;
wire   [31:0] input_min_4_fu_4862_p3;
reg   [31:0] empty_62_fu_478;
wire   [31:0] input_max_5_fu_4890_p3;
reg   [31:0] empty_63_fu_482;
wire   [31:0] input_min_5_fu_4918_p3;
reg   [31:0] empty_64_fu_486;
wire   [31:0] input_max_6_fu_4946_p3;
reg   [31:0] empty_65_fu_490;
wire   [31:0] input_min_6_fu_4974_p3;
reg   [31:0] empty_66_fu_494;
wire   [31:0] input_max_7_fu_5002_p3;
reg   [31:0] empty_67_fu_498;
wire   [31:0] input_min_7_fu_5030_p3;
reg   [31:0] empty_68_fu_502;
wire   [31:0] input_max_8_fu_5058_p3;
reg   [31:0] empty_69_fu_506;
wire   [31:0] input_min_8_fu_5086_p3;
reg   [31:0] empty_70_fu_510;
wire   [31:0] input_max_9_fu_5114_p3;
reg   [31:0] empty_71_fu_514;
wire   [31:0] input_min_9_fu_5142_p3;
reg   [31:0] empty_72_fu_518;
wire   [31:0] input_max_10_fu_5170_p3;
reg   [31:0] empty_73_fu_522;
wire   [31:0] input_min_10_fu_5198_p3;
reg   [31:0] empty_74_fu_526;
wire   [31:0] input_max_11_fu_5226_p3;
reg   [31:0] empty_75_fu_530;
wire   [31:0] input_min_11_fu_5254_p3;
reg   [31:0] empty_76_fu_534;
wire   [31:0] input_max_12_fu_5282_p3;
reg   [31:0] empty_77_fu_538;
wire   [31:0] input_min_12_fu_5310_p3;
reg   [31:0] empty_78_fu_542;
wire   [31:0] input_max_13_fu_5338_p3;
reg   [31:0] empty_79_fu_546;
wire   [31:0] input_min_13_fu_5366_p3;
reg   [31:0] empty_80_fu_550;
wire   [31:0] input_max_14_fu_5394_p3;
reg   [31:0] empty_81_fu_554;
wire   [31:0] input_min_14_fu_5422_p3;
reg   [31:0] empty_82_fu_558;
wire   [31:0] input_max_15_fu_5450_p3;
reg   [31:0] empty_83_fu_562;
wire   [31:0] input_min_15_fu_5478_p3;
reg   [11:0] k_fu_566;
wire   [11:0] add_ln795_fu_1986_p2;
reg   [11:0] ap_sig_allocacmp_k_1;
reg    input_stream_s_read_local;
reg    ap_block_pp0_stage0_01001;
reg    input_buffer_we1_local;
reg    input_buffer_ce1_local;
reg    input_buffer_1_we1_local;
reg    input_buffer_1_ce1_local;
reg    input_buffer_2_we1_local;
reg    input_buffer_2_ce1_local;
reg    input_buffer_3_we1_local;
reg    input_buffer_3_ce1_local;
reg    input_buffer_4_we1_local;
reg    input_buffer_4_ce1_local;
reg    input_buffer_5_we1_local;
reg    input_buffer_5_ce1_local;
reg    input_buffer_6_we1_local;
reg    input_buffer_6_ce1_local;
reg    input_buffer_7_we1_local;
reg    input_buffer_7_ce1_local;
reg    input_buffer_8_we1_local;
reg    input_buffer_8_ce1_local;
reg    input_buffer_9_we1_local;
reg    input_buffer_9_ce1_local;
reg    input_buffer_10_we1_local;
reg    input_buffer_10_ce1_local;
reg    input_buffer_11_we1_local;
reg    input_buffer_11_ce1_local;
reg    input_buffer_12_we1_local;
reg    input_buffer_12_ce1_local;
reg    input_buffer_13_we1_local;
reg    input_buffer_13_ce1_local;
reg    input_buffer_14_we1_local;
reg    input_buffer_14_ce1_local;
reg    input_buffer_15_we1_local;
reg    input_buffer_15_ce1_local;
reg   [31:0] grp_fu_1072_p0;
reg   [31:0] grp_fu_1072_p1;
reg   [31:0] grp_fu_1076_p0;
reg   [31:0] grp_fu_1076_p1;
reg   [31:0] grp_fu_1080_p0;
reg   [31:0] grp_fu_1080_p1;
reg   [31:0] grp_fu_1084_p0;
reg   [31:0] grp_fu_1084_p1;
reg   [31:0] grp_fu_1088_p0;
reg   [31:0] grp_fu_1088_p1;
reg   [31:0] grp_fu_1092_p0;
reg   [31:0] grp_fu_1092_p1;
reg   [31:0] grp_fu_1096_p0;
reg   [31:0] grp_fu_1096_p1;
reg   [31:0] grp_fu_1100_p0;
reg   [31:0] grp_fu_1100_p1;
reg   [31:0] grp_fu_1104_p0;
reg   [31:0] grp_fu_1104_p1;
reg   [31:0] grp_fu_1108_p0;
reg   [31:0] grp_fu_1108_p1;
reg   [31:0] grp_fu_1112_p0;
reg   [31:0] grp_fu_1112_p1;
reg   [31:0] grp_fu_1116_p0;
reg   [31:0] grp_fu_1116_p1;
reg   [31:0] grp_fu_1120_p0;
reg   [31:0] grp_fu_1120_p1;
reg   [31:0] grp_fu_1124_p0;
reg   [31:0] grp_fu_1124_p1;
reg   [31:0] grp_fu_1128_p0;
reg   [31:0] grp_fu_1128_p1;
reg   [31:0] grp_fu_1132_p0;
reg   [31:0] grp_fu_1132_p1;
reg   [31:0] grp_fu_1136_p0;
reg   [31:0] grp_fu_1136_p1;
reg   [31:0] grp_fu_1140_p0;
reg   [31:0] grp_fu_1140_p1;
reg   [31:0] grp_fu_1144_p0;
reg   [31:0] grp_fu_1144_p1;
reg   [31:0] grp_fu_1148_p0;
reg   [31:0] grp_fu_1148_p1;
reg   [31:0] grp_fu_1152_p0;
reg   [31:0] grp_fu_1152_p1;
reg   [31:0] grp_fu_1156_p0;
reg   [31:0] grp_fu_1156_p1;
reg   [31:0] grp_fu_1160_p0;
reg   [31:0] grp_fu_1160_p1;
reg   [31:0] grp_fu_1164_p0;
reg   [31:0] grp_fu_1164_p1;
reg   [31:0] grp_fu_1168_p0;
reg   [31:0] grp_fu_1168_p1;
reg   [31:0] grp_fu_1172_p0;
reg   [31:0] grp_fu_1172_p1;
reg   [31:0] grp_fu_1176_p0;
reg   [31:0] grp_fu_1176_p1;
reg   [31:0] grp_fu_1180_p0;
reg   [31:0] grp_fu_1180_p1;
reg   [31:0] grp_fu_1184_p0;
reg   [31:0] grp_fu_1184_p1;
reg   [31:0] grp_fu_1188_p0;
reg   [31:0] grp_fu_1188_p1;
reg   [31:0] grp_fu_1192_p0;
reg   [31:0] grp_fu_1192_p1;
reg   [31:0] grp_fu_1196_p0;
reg   [31:0] grp_fu_1196_p1;
wire   [31:0] trunc_ln91_fu_2223_p1;
wire   [31:0] trunc_ln91_2_fu_2227_p4;
wire   [31:0] trunc_ln91_3_fu_2237_p4;
wire   [31:0] trunc_ln91_4_fu_2247_p4;
wire   [31:0] trunc_ln91_5_fu_2257_p4;
wire   [31:0] trunc_ln91_6_fu_2267_p4;
wire   [31:0] trunc_ln91_7_fu_2277_p4;
wire   [31:0] trunc_ln91_8_fu_2287_p4;
wire   [31:0] trunc_ln91_9_fu_2297_p4;
wire   [31:0] trunc_ln91_s_fu_2307_p4;
wire   [31:0] trunc_ln91_1_fu_2317_p4;
wire   [31:0] trunc_ln91_10_fu_2327_p4;
wire   [31:0] trunc_ln91_11_fu_2337_p4;
wire   [31:0] trunc_ln91_12_fu_2347_p4;
wire   [31:0] trunc_ln91_13_fu_2357_p4;
wire   [31:0] trunc_ln91_14_fu_2367_p4;
wire   [31:0] bitcast_ln800_fu_2471_p1;
wire   [7:0] tmp_fu_2457_p4;
wire   [22:0] trunc_ln800_fu_2467_p1;
wire   [0:0] icmp_ln800_1_fu_2495_p2;
wire   [0:0] icmp_ln800_fu_2489_p2;
wire   [7:0] tmp_9_fu_2475_p4;
wire   [22:0] trunc_ln800_1_fu_2485_p1;
wire   [31:0] bitcast_ln803_fu_2527_p1;
wire   [7:0] tmp_1_fu_2531_p4;
wire   [22:0] trunc_ln803_fu_2541_p1;
wire   [31:0] bitcast_ln800_1_fu_2585_p1;
wire   [7:0] tmp_3_fu_2565_p4;
wire   [22:0] trunc_ln800_2_fu_2575_p4;
wire   [0:0] icmp_ln800_5_fu_2609_p2;
wire   [0:0] icmp_ln800_4_fu_2603_p2;
wire   [7:0] tmp_4_fu_2589_p4;
wire   [22:0] trunc_ln800_3_fu_2599_p1;
wire   [31:0] bitcast_ln803_1_fu_2641_p1;
wire   [7:0] tmp_6_fu_2645_p4;
wire   [22:0] trunc_ln803_1_fu_2655_p1;
wire   [31:0] bitcast_ln800_2_fu_2699_p1;
wire   [7:0] tmp_8_fu_2679_p4;
wire   [22:0] trunc_ln800_4_fu_2689_p4;
wire   [0:0] icmp_ln800_9_fu_2723_p2;
wire   [0:0] icmp_ln800_8_fu_2717_p2;
wire   [7:0] tmp_10_fu_2703_p4;
wire   [22:0] trunc_ln800_5_fu_2713_p1;
wire   [31:0] bitcast_ln803_2_fu_2755_p1;
wire   [7:0] tmp_12_fu_2759_p4;
wire   [22:0] trunc_ln803_2_fu_2769_p1;
wire   [31:0] bitcast_ln800_3_fu_2813_p1;
wire   [7:0] tmp_14_fu_2793_p4;
wire   [22:0] trunc_ln800_6_fu_2803_p4;
wire   [0:0] icmp_ln800_13_fu_2837_p2;
wire   [0:0] icmp_ln800_12_fu_2831_p2;
wire   [7:0] tmp_15_fu_2817_p4;
wire   [22:0] trunc_ln800_7_fu_2827_p1;
wire   [31:0] bitcast_ln803_3_fu_2869_p1;
wire   [7:0] tmp_17_fu_2873_p4;
wire   [22:0] trunc_ln803_3_fu_2883_p1;
wire   [31:0] bitcast_ln800_4_fu_2927_p1;
wire   [7:0] tmp_19_fu_2907_p4;
wire   [22:0] trunc_ln800_8_fu_2917_p4;
wire   [0:0] icmp_ln800_17_fu_2951_p2;
wire   [0:0] icmp_ln800_16_fu_2945_p2;
wire   [7:0] tmp_20_fu_2931_p4;
wire   [22:0] trunc_ln800_9_fu_2941_p1;
wire   [31:0] bitcast_ln803_4_fu_2983_p1;
wire   [7:0] tmp_22_fu_2987_p4;
wire   [22:0] trunc_ln803_4_fu_2997_p1;
wire   [31:0] bitcast_ln800_5_fu_3041_p1;
wire   [7:0] tmp_24_fu_3021_p4;
wire   [22:0] trunc_ln800_s_fu_3031_p4;
wire   [0:0] icmp_ln800_21_fu_3065_p2;
wire   [0:0] icmp_ln800_20_fu_3059_p2;
wire   [7:0] tmp_25_fu_3045_p4;
wire   [22:0] trunc_ln800_10_fu_3055_p1;
wire   [31:0] bitcast_ln803_5_fu_3097_p1;
wire   [7:0] tmp_27_fu_3101_p4;
wire   [22:0] trunc_ln803_5_fu_3111_p1;
wire   [31:0] bitcast_ln800_6_fu_3155_p1;
wire   [7:0] tmp_29_fu_3135_p4;
wire   [22:0] trunc_ln800_11_fu_3145_p4;
wire   [0:0] icmp_ln800_25_fu_3179_p2;
wire   [0:0] icmp_ln800_24_fu_3173_p2;
wire   [7:0] tmp_30_fu_3159_p4;
wire   [22:0] trunc_ln800_12_fu_3169_p1;
wire   [31:0] bitcast_ln803_6_fu_3211_p1;
wire   [7:0] tmp_32_fu_3215_p4;
wire   [22:0] trunc_ln803_6_fu_3225_p1;
wire   [31:0] bitcast_ln800_7_fu_3269_p1;
wire   [7:0] tmp_34_fu_3249_p4;
wire   [22:0] trunc_ln800_13_fu_3259_p4;
wire   [0:0] icmp_ln800_29_fu_3293_p2;
wire   [0:0] icmp_ln800_28_fu_3287_p2;
wire   [7:0] tmp_35_fu_3273_p4;
wire   [22:0] trunc_ln800_14_fu_3283_p1;
wire   [31:0] bitcast_ln803_7_fu_3325_p1;
wire   [7:0] tmp_37_fu_3329_p4;
wire   [22:0] trunc_ln803_7_fu_3339_p1;
wire   [31:0] bitcast_ln800_8_fu_3383_p1;
wire   [7:0] tmp_39_fu_3363_p4;
wire   [22:0] trunc_ln800_15_fu_3373_p4;
wire   [0:0] icmp_ln800_33_fu_3407_p2;
wire   [0:0] icmp_ln800_32_fu_3401_p2;
wire   [7:0] tmp_40_fu_3387_p4;
wire   [22:0] trunc_ln800_16_fu_3397_p1;
wire   [31:0] bitcast_ln803_8_fu_3439_p1;
wire   [7:0] tmp_42_fu_3443_p4;
wire   [22:0] trunc_ln803_8_fu_3453_p1;
wire   [31:0] bitcast_ln800_9_fu_3497_p1;
wire   [7:0] tmp_44_fu_3477_p4;
wire   [22:0] trunc_ln800_17_fu_3487_p4;
wire   [0:0] icmp_ln800_37_fu_3521_p2;
wire   [0:0] icmp_ln800_36_fu_3515_p2;
wire   [7:0] tmp_45_fu_3501_p4;
wire   [22:0] trunc_ln800_18_fu_3511_p1;
wire   [31:0] bitcast_ln803_9_fu_3553_p1;
wire   [7:0] tmp_47_fu_3557_p4;
wire   [22:0] trunc_ln803_9_fu_3567_p1;
wire   [31:0] bitcast_ln800_10_fu_3611_p1;
wire   [7:0] tmp_49_fu_3591_p4;
wire   [22:0] trunc_ln800_19_fu_3601_p4;
wire   [0:0] icmp_ln800_41_fu_3635_p2;
wire   [0:0] icmp_ln800_40_fu_3629_p2;
wire   [7:0] tmp_50_fu_3615_p4;
wire   [22:0] trunc_ln800_20_fu_3625_p1;
wire   [31:0] bitcast_ln803_10_fu_3667_p1;
wire   [7:0] tmp_52_fu_3671_p4;
wire   [22:0] trunc_ln803_10_fu_3681_p1;
wire   [31:0] bitcast_ln800_11_fu_3725_p1;
wire   [7:0] tmp_54_fu_3705_p4;
wire   [22:0] trunc_ln800_21_fu_3715_p4;
wire   [0:0] icmp_ln800_45_fu_3749_p2;
wire   [0:0] icmp_ln800_44_fu_3743_p2;
wire   [7:0] tmp_55_fu_3729_p4;
wire   [22:0] trunc_ln800_22_fu_3739_p1;
wire   [31:0] bitcast_ln803_11_fu_3781_p1;
wire   [7:0] tmp_57_fu_3785_p4;
wire   [22:0] trunc_ln803_11_fu_3795_p1;
wire   [31:0] bitcast_ln800_12_fu_3839_p1;
wire   [7:0] tmp_59_fu_3819_p4;
wire   [22:0] trunc_ln800_23_fu_3829_p4;
wire   [0:0] icmp_ln800_49_fu_3863_p2;
wire   [0:0] icmp_ln800_48_fu_3857_p2;
wire   [7:0] tmp_60_fu_3843_p4;
wire   [22:0] trunc_ln800_24_fu_3853_p1;
wire   [31:0] bitcast_ln803_12_fu_3895_p1;
wire   [7:0] tmp_62_fu_3899_p4;
wire   [22:0] trunc_ln803_12_fu_3909_p1;
wire   [31:0] bitcast_ln800_13_fu_3953_p1;
wire   [7:0] tmp_64_fu_3933_p4;
wire   [22:0] trunc_ln800_25_fu_3943_p4;
wire   [0:0] icmp_ln800_53_fu_3977_p2;
wire   [0:0] icmp_ln800_52_fu_3971_p2;
wire   [7:0] tmp_65_fu_3957_p4;
wire   [22:0] trunc_ln800_26_fu_3967_p1;
wire   [31:0] bitcast_ln803_13_fu_4009_p1;
wire   [7:0] tmp_67_fu_4013_p4;
wire   [22:0] trunc_ln803_13_fu_4023_p1;
wire   [31:0] bitcast_ln800_14_fu_4067_p1;
wire   [7:0] tmp_69_fu_4047_p4;
wire   [22:0] trunc_ln800_27_fu_4057_p4;
wire   [0:0] icmp_ln800_57_fu_4091_p2;
wire   [0:0] icmp_ln800_56_fu_4085_p2;
wire   [7:0] tmp_70_fu_4071_p4;
wire   [22:0] trunc_ln800_28_fu_4081_p1;
wire   [31:0] bitcast_ln803_14_fu_4123_p1;
wire   [7:0] tmp_72_fu_4127_p4;
wire   [22:0] trunc_ln803_14_fu_4137_p1;
wire   [31:0] bitcast_ln800_15_fu_4309_p1;
wire   [7:0] tmp_74_fu_4289_p4;
wire   [22:0] trunc_ln800_29_fu_4299_p4;
wire   [0:0] icmp_ln800_61_fu_4333_p2;
wire   [0:0] icmp_ln800_60_fu_4327_p2;
wire   [7:0] tmp_75_fu_4313_p4;
wire   [22:0] trunc_ln800_30_fu_4323_p1;
wire   [31:0] bitcast_ln803_15_fu_4365_p1;
wire   [7:0] tmp_77_fu_4369_p4;
wire   [22:0] trunc_ln803_15_fu_4379_p1;
wire   [0:0] or_ln800_1_fu_4595_p2;
wire   [0:0] and_ln800_fu_4599_p2;
wire   [0:0] grp_fu_1072_p2;
wire   [0:0] and_ln800_1_fu_4604_p2;
wire   [0:0] or_ln803_fu_4623_p2;
wire   [0:0] and_ln803_fu_4627_p2;
wire   [0:0] grp_fu_1076_p2;
wire   [0:0] and_ln803_1_fu_4632_p2;
wire   [0:0] or_ln800_3_fu_4651_p2;
wire   [0:0] and_ln800_2_fu_4655_p2;
wire   [0:0] grp_fu_1080_p2;
wire   [0:0] and_ln800_3_fu_4660_p2;
wire   [0:0] or_ln803_1_fu_4679_p2;
wire   [0:0] and_ln803_2_fu_4683_p2;
wire   [0:0] grp_fu_1084_p2;
wire   [0:0] and_ln803_3_fu_4688_p2;
wire   [0:0] or_ln800_5_fu_4707_p2;
wire   [0:0] and_ln800_4_fu_4711_p2;
wire   [0:0] grp_fu_1088_p2;
wire   [0:0] and_ln800_5_fu_4716_p2;
wire   [0:0] or_ln803_2_fu_4735_p2;
wire   [0:0] and_ln803_4_fu_4739_p2;
wire   [0:0] grp_fu_1092_p2;
wire   [0:0] and_ln803_5_fu_4744_p2;
wire   [0:0] or_ln800_7_fu_4763_p2;
wire   [0:0] and_ln800_6_fu_4767_p2;
wire   [0:0] grp_fu_1096_p2;
wire   [0:0] and_ln800_7_fu_4772_p2;
wire   [0:0] or_ln803_3_fu_4791_p2;
wire   [0:0] and_ln803_6_fu_4795_p2;
wire   [0:0] grp_fu_1100_p2;
wire   [0:0] and_ln803_7_fu_4800_p2;
wire   [0:0] or_ln800_9_fu_4819_p2;
wire   [0:0] and_ln800_8_fu_4823_p2;
wire   [0:0] grp_fu_1104_p2;
wire   [0:0] and_ln800_9_fu_4828_p2;
wire   [0:0] or_ln803_4_fu_4847_p2;
wire   [0:0] and_ln803_8_fu_4851_p2;
wire   [0:0] grp_fu_1108_p2;
wire   [0:0] and_ln803_9_fu_4856_p2;
wire   [0:0] or_ln800_11_fu_4875_p2;
wire   [0:0] and_ln800_10_fu_4879_p2;
wire   [0:0] grp_fu_1112_p2;
wire   [0:0] and_ln800_11_fu_4884_p2;
wire   [0:0] or_ln803_5_fu_4903_p2;
wire   [0:0] and_ln803_10_fu_4907_p2;
wire   [0:0] grp_fu_1116_p2;
wire   [0:0] and_ln803_11_fu_4912_p2;
wire   [0:0] or_ln800_13_fu_4931_p2;
wire   [0:0] and_ln800_12_fu_4935_p2;
wire   [0:0] grp_fu_1120_p2;
wire   [0:0] and_ln800_13_fu_4940_p2;
wire   [0:0] or_ln803_6_fu_4959_p2;
wire   [0:0] and_ln803_12_fu_4963_p2;
wire   [0:0] grp_fu_1124_p2;
wire   [0:0] and_ln803_13_fu_4968_p2;
wire   [0:0] or_ln800_15_fu_4987_p2;
wire   [0:0] and_ln800_14_fu_4991_p2;
wire   [0:0] grp_fu_1128_p2;
wire   [0:0] and_ln800_15_fu_4996_p2;
wire   [0:0] or_ln803_7_fu_5015_p2;
wire   [0:0] and_ln803_14_fu_5019_p2;
wire   [0:0] grp_fu_1132_p2;
wire   [0:0] and_ln803_15_fu_5024_p2;
wire   [0:0] or_ln800_17_fu_5043_p2;
wire   [0:0] and_ln800_16_fu_5047_p2;
wire   [0:0] grp_fu_1136_p2;
wire   [0:0] and_ln800_17_fu_5052_p2;
wire   [0:0] or_ln803_8_fu_5071_p2;
wire   [0:0] and_ln803_16_fu_5075_p2;
wire   [0:0] grp_fu_1140_p2;
wire   [0:0] and_ln803_17_fu_5080_p2;
wire   [0:0] or_ln800_19_fu_5099_p2;
wire   [0:0] and_ln800_18_fu_5103_p2;
wire   [0:0] grp_fu_1144_p2;
wire   [0:0] and_ln800_19_fu_5108_p2;
wire   [0:0] or_ln803_9_fu_5127_p2;
wire   [0:0] and_ln803_18_fu_5131_p2;
wire   [0:0] grp_fu_1148_p2;
wire   [0:0] and_ln803_19_fu_5136_p2;
wire   [0:0] or_ln800_21_fu_5155_p2;
wire   [0:0] and_ln800_20_fu_5159_p2;
wire   [0:0] grp_fu_1152_p2;
wire   [0:0] and_ln800_21_fu_5164_p2;
wire   [0:0] or_ln803_10_fu_5183_p2;
wire   [0:0] and_ln803_20_fu_5187_p2;
wire   [0:0] grp_fu_1156_p2;
wire   [0:0] and_ln803_21_fu_5192_p2;
wire   [0:0] grp_fu_1160_p2;
wire   [0:0] and_ln800_22_fu_5215_p2;
wire   [0:0] or_ln800_23_fu_5211_p2;
wire   [0:0] and_ln800_23_fu_5220_p2;
wire   [0:0] grp_fu_1164_p2;
wire   [0:0] and_ln803_22_fu_5243_p2;
wire   [0:0] or_ln803_11_fu_5239_p2;
wire   [0:0] and_ln803_23_fu_5248_p2;
wire   [0:0] grp_fu_1168_p2;
wire   [0:0] and_ln800_24_fu_5271_p2;
wire   [0:0] or_ln800_25_fu_5267_p2;
wire   [0:0] and_ln800_25_fu_5276_p2;
wire   [0:0] grp_fu_1172_p2;
wire   [0:0] and_ln803_24_fu_5299_p2;
wire   [0:0] or_ln803_12_fu_5295_p2;
wire   [0:0] and_ln803_25_fu_5304_p2;
wire   [0:0] grp_fu_1176_p2;
wire   [0:0] and_ln800_26_fu_5327_p2;
wire   [0:0] or_ln800_27_fu_5323_p2;
wire   [0:0] and_ln800_27_fu_5332_p2;
wire   [0:0] grp_fu_1180_p2;
wire   [0:0] and_ln803_26_fu_5355_p2;
wire   [0:0] or_ln803_13_fu_5351_p2;
wire   [0:0] and_ln803_27_fu_5360_p2;
wire   [0:0] grp_fu_1184_p2;
wire   [0:0] and_ln800_28_fu_5383_p2;
wire   [0:0] or_ln800_29_fu_5379_p2;
wire   [0:0] and_ln800_29_fu_5388_p2;
wire   [0:0] grp_fu_1188_p2;
wire   [0:0] and_ln803_28_fu_5411_p2;
wire   [0:0] or_ln803_14_fu_5407_p2;
wire   [0:0] and_ln803_29_fu_5416_p2;
wire   [0:0] grp_fu_1192_p2;
wire   [0:0] and_ln800_30_fu_5439_p2;
wire   [0:0] or_ln800_31_fu_5435_p2;
wire   [0:0] and_ln800_31_fu_5444_p2;
wire   [0:0] grp_fu_1196_p2;
wire   [0:0] and_ln803_30_fu_5467_p2;
wire   [0:0] or_ln803_15_fu_5463_p2;
wire   [0:0] and_ln803_31_fu_5472_p2;
wire   [4:0] grp_fu_1072_opcode;
reg    ap_block_pp0_stage0_00001;
wire   [4:0] grp_fu_1076_opcode;
wire   [4:0] grp_fu_1080_opcode;
wire   [4:0] grp_fu_1084_opcode;
wire   [4:0] grp_fu_1088_opcode;
wire   [4:0] grp_fu_1092_opcode;
wire   [4:0] grp_fu_1096_opcode;
wire   [4:0] grp_fu_1100_opcode;
wire   [4:0] grp_fu_1104_opcode;
wire   [4:0] grp_fu_1108_opcode;
wire   [4:0] grp_fu_1112_opcode;
wire   [4:0] grp_fu_1116_opcode;
wire   [4:0] grp_fu_1120_opcode;
wire   [4:0] grp_fu_1124_opcode;
wire   [4:0] grp_fu_1128_opcode;
wire   [4:0] grp_fu_1132_opcode;
wire   [4:0] grp_fu_1136_opcode;
wire   [4:0] grp_fu_1140_opcode;
wire   [4:0] grp_fu_1144_opcode;
wire   [4:0] grp_fu_1148_opcode;
wire   [4:0] grp_fu_1152_opcode;
wire   [4:0] grp_fu_1156_opcode;
wire   [4:0] grp_fu_1160_opcode;
wire   [4:0] grp_fu_1164_opcode;
wire   [4:0] grp_fu_1168_opcode;
wire   [4:0] grp_fu_1172_opcode;
wire   [4:0] grp_fu_1176_opcode;
wire   [4:0] grp_fu_1180_opcode;
wire   [4:0] grp_fu_1184_opcode;
wire   [4:0] grp_fu_1188_opcode;
wire   [4:0] grp_fu_1192_opcode;
wire   [4:0] grp_fu_1196_opcode;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 empty_fu_310 = 32'd0;
#0 empty_21_fu_314 = 32'd0;
#0 empty_22_fu_318 = 32'd0;
#0 empty_23_fu_322 = 32'd0;
#0 empty_24_fu_326 = 32'd0;
#0 empty_25_fu_330 = 32'd0;
#0 empty_26_fu_334 = 32'd0;
#0 empty_27_fu_338 = 32'd0;
#0 empty_28_fu_342 = 32'd0;
#0 empty_29_fu_346 = 32'd0;
#0 empty_30_fu_350 = 32'd0;
#0 empty_31_fu_354 = 32'd0;
#0 empty_32_fu_358 = 32'd0;
#0 empty_33_fu_362 = 32'd0;
#0 empty_34_fu_366 = 32'd0;
#0 empty_35_fu_370 = 32'd0;
#0 empty_36_fu_374 = 32'd0;
#0 empty_37_fu_378 = 32'd0;
#0 empty_38_fu_382 = 32'd0;
#0 empty_39_fu_386 = 32'd0;
#0 empty_40_fu_390 = 32'd0;
#0 empty_41_fu_394 = 32'd0;
#0 empty_42_fu_398 = 32'd0;
#0 empty_43_fu_402 = 32'd0;
#0 empty_44_fu_406 = 32'd0;
#0 empty_45_fu_410 = 32'd0;
#0 empty_46_fu_414 = 32'd0;
#0 empty_47_fu_418 = 32'd0;
#0 empty_48_fu_422 = 32'd0;
#0 empty_49_fu_426 = 32'd0;
#0 empty_50_fu_430 = 32'd0;
#0 empty_51_fu_434 = 32'd0;
#0 empty_52_fu_438 = 32'd0;
#0 empty_53_fu_442 = 32'd0;
#0 empty_54_fu_446 = 32'd0;
#0 empty_55_fu_450 = 32'd0;
#0 empty_56_fu_454 = 32'd0;
#0 empty_57_fu_458 = 32'd0;
#0 empty_58_fu_462 = 32'd0;
#0 empty_59_fu_466 = 32'd0;
#0 empty_60_fu_470 = 32'd0;
#0 empty_61_fu_474 = 32'd0;
#0 empty_62_fu_478 = 32'd0;
#0 empty_63_fu_482 = 32'd0;
#0 empty_64_fu_486 = 32'd0;
#0 empty_65_fu_490 = 32'd0;
#0 empty_66_fu_494 = 32'd0;
#0 empty_67_fu_498 = 32'd0;
#0 empty_68_fu_502 = 32'd0;
#0 empty_69_fu_506 = 32'd0;
#0 empty_70_fu_510 = 32'd0;
#0 empty_71_fu_514 = 32'd0;
#0 empty_72_fu_518 = 32'd0;
#0 empty_73_fu_522 = 32'd0;
#0 empty_74_fu_526 = 32'd0;
#0 empty_75_fu_530 = 32'd0;
#0 empty_76_fu_534 = 32'd0;
#0 empty_77_fu_538 = 32'd0;
#0 empty_78_fu_542 = 32'd0;
#0 empty_79_fu_546 = 32'd0;
#0 empty_80_fu_550 = 32'd0;
#0 empty_81_fu_554 = 32'd0;
#0 empty_82_fu_558 = 32'd0;
#0 empty_83_fu_562 = 32'd0;
#0 k_fu_566 = 12'd0;
#0 ap_done_reg = 1'b0;
end
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U1(
    .din0(grp_fu_1072_p0),
    .din1(grp_fu_1072_p1),
    .opcode(grp_fu_1072_opcode),
    .dout(grp_fu_1072_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U2(
    .din0(grp_fu_1076_p0),
    .din1(grp_fu_1076_p1),
    .opcode(grp_fu_1076_opcode),
    .dout(grp_fu_1076_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U3(
    .din0(grp_fu_1080_p0),
    .din1(grp_fu_1080_p1),
    .opcode(grp_fu_1080_opcode),
    .dout(grp_fu_1080_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U4(
    .din0(grp_fu_1084_p0),
    .din1(grp_fu_1084_p1),
    .opcode(grp_fu_1084_opcode),
    .dout(grp_fu_1084_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U5(
    .din0(grp_fu_1088_p0),
    .din1(grp_fu_1088_p1),
    .opcode(grp_fu_1088_opcode),
    .dout(grp_fu_1088_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U6(
    .din0(grp_fu_1092_p0),
    .din1(grp_fu_1092_p1),
    .opcode(grp_fu_1092_opcode),
    .dout(grp_fu_1092_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U7(
    .din0(grp_fu_1096_p0),
    .din1(grp_fu_1096_p1),
    .opcode(grp_fu_1096_opcode),
    .dout(grp_fu_1096_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U8(
    .din0(grp_fu_1100_p0),
    .din1(grp_fu_1100_p1),
    .opcode(grp_fu_1100_opcode),
    .dout(grp_fu_1100_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U9(
    .din0(grp_fu_1104_p0),
    .din1(grp_fu_1104_p1),
    .opcode(grp_fu_1104_opcode),
    .dout(grp_fu_1104_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U10(
    .din0(grp_fu_1108_p0),
    .din1(grp_fu_1108_p1),
    .opcode(grp_fu_1108_opcode),
    .dout(grp_fu_1108_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U11(
    .din0(grp_fu_1112_p0),
    .din1(grp_fu_1112_p1),
    .opcode(grp_fu_1112_opcode),
    .dout(grp_fu_1112_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U12(
    .din0(grp_fu_1116_p0),
    .din1(grp_fu_1116_p1),
    .opcode(grp_fu_1116_opcode),
    .dout(grp_fu_1116_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U13(
    .din0(grp_fu_1120_p0),
    .din1(grp_fu_1120_p1),
    .opcode(grp_fu_1120_opcode),
    .dout(grp_fu_1120_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U14(
    .din0(grp_fu_1124_p0),
    .din1(grp_fu_1124_p1),
    .opcode(grp_fu_1124_opcode),
    .dout(grp_fu_1124_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U15(
    .din0(grp_fu_1128_p0),
    .din1(grp_fu_1128_p1),
    .opcode(grp_fu_1128_opcode),
    .dout(grp_fu_1128_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U16(
    .din0(grp_fu_1132_p0),
    .din1(grp_fu_1132_p1),
    .opcode(grp_fu_1132_opcode),
    .dout(grp_fu_1132_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U17(
    .din0(grp_fu_1136_p0),
    .din1(grp_fu_1136_p1),
    .opcode(grp_fu_1136_opcode),
    .dout(grp_fu_1136_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U18(
    .din0(grp_fu_1140_p0),
    .din1(grp_fu_1140_p1),
    .opcode(grp_fu_1140_opcode),
    .dout(grp_fu_1140_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U19(
    .din0(grp_fu_1144_p0),
    .din1(grp_fu_1144_p1),
    .opcode(grp_fu_1144_opcode),
    .dout(grp_fu_1144_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U20(
    .din0(grp_fu_1148_p0),
    .din1(grp_fu_1148_p1),
    .opcode(grp_fu_1148_opcode),
    .dout(grp_fu_1148_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U21(
    .din0(grp_fu_1152_p0),
    .din1(grp_fu_1152_p1),
    .opcode(grp_fu_1152_opcode),
    .dout(grp_fu_1152_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U22(
    .din0(grp_fu_1156_p0),
    .din1(grp_fu_1156_p1),
    .opcode(grp_fu_1156_opcode),
    .dout(grp_fu_1156_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U23(
    .din0(grp_fu_1160_p0),
    .din1(grp_fu_1160_p1),
    .opcode(grp_fu_1160_opcode),
    .dout(grp_fu_1160_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U24(
    .din0(grp_fu_1164_p0),
    .din1(grp_fu_1164_p1),
    .opcode(grp_fu_1164_opcode),
    .dout(grp_fu_1164_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U25(
    .din0(grp_fu_1168_p0),
    .din1(grp_fu_1168_p1),
    .opcode(grp_fu_1168_opcode),
    .dout(grp_fu_1168_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U26(
    .din0(grp_fu_1172_p0),
    .din1(grp_fu_1172_p1),
    .opcode(grp_fu_1172_opcode),
    .dout(grp_fu_1172_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U27(
    .din0(grp_fu_1176_p0),
    .din1(grp_fu_1176_p1),
    .opcode(grp_fu_1176_opcode),
    .dout(grp_fu_1176_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U28(
    .din0(grp_fu_1180_p0),
    .din1(grp_fu_1180_p1),
    .opcode(grp_fu_1180_opcode),
    .dout(grp_fu_1180_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U29(
    .din0(grp_fu_1184_p0),
    .din1(grp_fu_1184_p1),
    .opcode(grp_fu_1184_opcode),
    .dout(grp_fu_1184_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U30(
    .din0(grp_fu_1188_p0),
    .din1(grp_fu_1188_p1),
    .opcode(grp_fu_1188_opcode),
    .dout(grp_fu_1188_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U31(
    .din0(grp_fu_1192_p0),
    .din1(grp_fu_1192_p1),
    .opcode(grp_fu_1192_opcode),
    .dout(grp_fu_1192_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_fcmp_32ns_32ns_1_1_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_1_no_dsp_1_U32(
    .din0(grp_fu_1196_p0),
    .din1(grp_fu_1196_p1),
    .opcode(grp_fu_1196_opcode),
    .dout(grp_fu_1196_p2)
);
quant_layer_r1_ln_iembed_fp32_int4_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_21_fu_314 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_21_fu_314 <= select_ln803_fu_4645_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_22_fu_318 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_22_fu_318 <= select_ln800_2_fu_4673_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_23_fu_322 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_23_fu_322 <= select_ln803_2_fu_4701_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_24_fu_326 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_24_fu_326 <= select_ln800_4_fu_4729_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_25_fu_330 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_25_fu_330 <= select_ln803_4_fu_4757_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_26_fu_334 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_26_fu_334 <= select_ln800_6_fu_4785_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_27_fu_338 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_27_fu_338 <= select_ln803_6_fu_4813_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_28_fu_342 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_28_fu_342 <= select_ln800_8_fu_4841_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_29_fu_346 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_29_fu_346 <= select_ln803_8_fu_4869_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_30_fu_350 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_30_fu_350 <= select_ln800_10_fu_4897_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_31_fu_354 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_31_fu_354 <= select_ln803_10_fu_4925_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_32_fu_358 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_32_fu_358 <= select_ln800_12_fu_4953_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_33_fu_362 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_33_fu_362 <= select_ln803_12_fu_4981_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_34_fu_366 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_34_fu_366 <= select_ln800_14_fu_5009_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_35_fu_370 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_35_fu_370 <= select_ln803_14_fu_5037_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_36_fu_374 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_36_fu_374 <= select_ln800_16_fu_5065_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_37_fu_378 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_37_fu_378 <= select_ln803_16_fu_5093_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_38_fu_382 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_38_fu_382 <= select_ln800_18_fu_5121_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_39_fu_386 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_39_fu_386 <= select_ln803_18_fu_5149_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_40_fu_390 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_40_fu_390 <= select_ln800_20_fu_5177_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_41_fu_394 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_41_fu_394 <= select_ln803_20_fu_5205_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_42_fu_398 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_42_fu_398 <= select_ln800_22_fu_5233_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_43_fu_402 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_43_fu_402 <= select_ln803_22_fu_5261_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_44_fu_406 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_44_fu_406 <= select_ln800_24_fu_5289_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_45_fu_410 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_45_fu_410 <= select_ln803_24_fu_5317_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_46_fu_414 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_46_fu_414 <= select_ln800_26_fu_5345_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_47_fu_418 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_47_fu_418 <= select_ln803_26_fu_5373_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_48_fu_422 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_48_fu_422 <= select_ln800_28_fu_5401_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_49_fu_426 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_49_fu_426 <= select_ln803_28_fu_5429_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_50_fu_430 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_50_fu_430 <= select_ln800_30_fu_5457_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_51_fu_434 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_51_fu_434 <= select_ln803_30_fu_5485_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_52_fu_438 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_52_fu_438 <= input_max_fu_4610_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_53_fu_442 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_53_fu_442 <= input_min_fu_4638_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_54_fu_446 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_54_fu_446 <= input_max_1_fu_4666_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_55_fu_450 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_55_fu_450 <= input_min_1_fu_4694_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_56_fu_454 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_56_fu_454 <= input_max_2_fu_4722_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_57_fu_458 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_57_fu_458 <= input_min_2_fu_4750_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_58_fu_462 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_58_fu_462 <= input_max_3_fu_4778_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_59_fu_466 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_59_fu_466 <= input_min_3_fu_4806_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_60_fu_470 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_60_fu_470 <= input_max_4_fu_4834_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_61_fu_474 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_61_fu_474 <= input_min_4_fu_4862_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_62_fu_478 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_62_fu_478 <= input_max_5_fu_4890_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_63_fu_482 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_63_fu_482 <= input_min_5_fu_4918_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_64_fu_486 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_64_fu_486 <= input_max_6_fu_4946_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_65_fu_490 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_65_fu_490 <= input_min_6_fu_4974_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_66_fu_494 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_66_fu_494 <= input_max_7_fu_5002_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_67_fu_498 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_67_fu_498 <= input_min_7_fu_5030_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_68_fu_502 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_68_fu_502 <= input_max_8_fu_5058_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_69_fu_506 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_69_fu_506 <= input_min_8_fu_5086_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_70_fu_510 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_70_fu_510 <= input_max_9_fu_5114_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_71_fu_514 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_71_fu_514 <= input_min_9_fu_5142_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_72_fu_518 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_72_fu_518 <= input_max_10_fu_5170_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_73_fu_522 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_73_fu_522 <= input_min_10_fu_5198_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_74_fu_526 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_74_fu_526 <= input_max_11_fu_5226_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_75_fu_530 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_75_fu_530 <= input_min_11_fu_5254_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_76_fu_534 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_76_fu_534 <= input_max_12_fu_5282_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_77_fu_538 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_77_fu_538 <= input_min_12_fu_5310_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_78_fu_542 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_78_fu_542 <= input_max_13_fu_5338_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_79_fu_546 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_79_fu_546 <= input_min_13_fu_5366_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_80_fu_550 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_80_fu_550 <= input_max_14_fu_5394_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_81_fu_554 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_81_fu_554 <= input_min_14_fu_5422_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_82_fu_558 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_82_fu_558 <= input_max_15_fu_5450_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_83_fu_562 <= 32'd1343554297;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_83_fu_562 <= input_min_15_fu_5478_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            empty_fu_310 <= 32'd3491037945;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            empty_fu_310 <= select_ln800_fu_4617_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln795_fu_1992_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_566 <= add_ln795_fu_1986_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_566 <= 12'd0;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        bitcast_ln91_10_reg_7678 <= bitcast_ln91_10_fu_2427_p1;
        bitcast_ln91_11_reg_7690 <= bitcast_ln91_11_fu_2432_p1;
        bitcast_ln91_12_reg_7702 <= bitcast_ln91_12_fu_2437_p1;
        bitcast_ln91_13_reg_7714 <= bitcast_ln91_13_fu_2442_p1;
        bitcast_ln91_14_reg_7726 <= bitcast_ln91_14_fu_2447_p1;
        bitcast_ln91_15_reg_7738 <= bitcast_ln91_15_fu_2452_p1;
        bitcast_ln91_1_reg_7570 <= bitcast_ln91_1_fu_2382_p1;
        bitcast_ln91_2_reg_7582 <= bitcast_ln91_2_fu_2387_p1;
        bitcast_ln91_3_reg_7594 <= bitcast_ln91_3_fu_2392_p1;
        bitcast_ln91_4_reg_7606 <= bitcast_ln91_4_fu_2397_p1;
        bitcast_ln91_5_reg_7618 <= bitcast_ln91_5_fu_2402_p1;
        bitcast_ln91_6_reg_7630 <= bitcast_ln91_6_fu_2407_p1;
        bitcast_ln91_7_reg_7642 <= bitcast_ln91_7_fu_2412_p1;
        bitcast_ln91_8_reg_7654 <= bitcast_ln91_8_fu_2417_p1;
        bitcast_ln91_9_reg_7666 <= bitcast_ln91_9_fu_2422_p1;
        bitcast_ln91_reg_7558 <= bitcast_ln91_fu_2377_p1;
        icmp_ln795_reg_7330 <= icmp_ln795_fu_1992_p2;
        icmp_ln800_10_reg_7808 <= icmp_ln800_10_fu_2735_p2;
        icmp_ln800_11_reg_7813 <= icmp_ln800_11_fu_2741_p2;
        icmp_ln800_14_reg_7834 <= icmp_ln800_14_fu_2849_p2;
        icmp_ln800_15_reg_7839 <= icmp_ln800_15_fu_2855_p2;
        icmp_ln800_18_reg_7860 <= icmp_ln800_18_fu_2963_p2;
        icmp_ln800_19_reg_7865 <= icmp_ln800_19_fu_2969_p2;
        icmp_ln800_22_reg_7886 <= icmp_ln800_22_fu_3077_p2;
        icmp_ln800_23_reg_7891 <= icmp_ln800_23_fu_3083_p2;
        icmp_ln800_26_reg_7912 <= icmp_ln800_26_fu_3191_p2;
        icmp_ln800_27_reg_7917 <= icmp_ln800_27_fu_3197_p2;
        icmp_ln800_2_reg_7756 <= icmp_ln800_2_fu_2507_p2;
        icmp_ln800_30_reg_7938 <= icmp_ln800_30_fu_3305_p2;
        icmp_ln800_31_reg_7943 <= icmp_ln800_31_fu_3311_p2;
        icmp_ln800_34_reg_7964 <= icmp_ln800_34_fu_3419_p2;
        icmp_ln800_35_reg_7969 <= icmp_ln800_35_fu_3425_p2;
        icmp_ln800_38_reg_7990 <= icmp_ln800_38_fu_3533_p2;
        icmp_ln800_39_reg_7995 <= icmp_ln800_39_fu_3539_p2;
        icmp_ln800_3_reg_7761 <= icmp_ln800_3_fu_2513_p2;
        icmp_ln800_42_reg_8016 <= icmp_ln800_42_fu_3647_p2;
        icmp_ln800_43_reg_8021 <= icmp_ln800_43_fu_3653_p2;
        icmp_ln800_46_reg_8042 <= icmp_ln800_46_fu_3761_p2;
        icmp_ln800_47_reg_8047 <= icmp_ln800_47_fu_3767_p2;
        icmp_ln800_50_reg_8068 <= icmp_ln800_50_fu_3875_p2;
        icmp_ln800_51_reg_8073 <= icmp_ln800_51_fu_3881_p2;
        icmp_ln800_54_reg_8094 <= icmp_ln800_54_fu_3989_p2;
        icmp_ln800_55_reg_8099 <= icmp_ln800_55_fu_3995_p2;
        icmp_ln800_58_reg_8120 <= icmp_ln800_58_fu_4103_p2;
        icmp_ln800_59_reg_8125 <= icmp_ln800_59_fu_4109_p2;
        icmp_ln800_62_reg_8146 <= icmp_ln800_62_fu_4345_p2;
        icmp_ln800_63_reg_8151 <= icmp_ln800_63_fu_4351_p2;
        icmp_ln800_6_reg_7782 <= icmp_ln800_6_fu_2621_p2;
        icmp_ln800_7_reg_7787 <= icmp_ln800_7_fu_2627_p2;
        icmp_ln803_10_reg_7896 <= icmp_ln803_10_fu_3115_p2;
        icmp_ln803_11_reg_7901 <= icmp_ln803_11_fu_3121_p2;
        icmp_ln803_12_reg_7922 <= icmp_ln803_12_fu_3229_p2;
        icmp_ln803_13_reg_7927 <= icmp_ln803_13_fu_3235_p2;
        icmp_ln803_14_reg_7948 <= icmp_ln803_14_fu_3343_p2;
        icmp_ln803_15_reg_7953 <= icmp_ln803_15_fu_3349_p2;
        icmp_ln803_16_reg_7974 <= icmp_ln803_16_fu_3457_p2;
        icmp_ln803_17_reg_7979 <= icmp_ln803_17_fu_3463_p2;
        icmp_ln803_18_reg_8000 <= icmp_ln803_18_fu_3571_p2;
        icmp_ln803_19_reg_8005 <= icmp_ln803_19_fu_3577_p2;
        icmp_ln803_1_reg_7771 <= icmp_ln803_1_fu_2551_p2;
        icmp_ln803_20_reg_8026 <= icmp_ln803_20_fu_3685_p2;
        icmp_ln803_21_reg_8031 <= icmp_ln803_21_fu_3691_p2;
        icmp_ln803_22_reg_8052 <= icmp_ln803_22_fu_3799_p2;
        icmp_ln803_23_reg_8057 <= icmp_ln803_23_fu_3805_p2;
        icmp_ln803_24_reg_8078 <= icmp_ln803_24_fu_3913_p2;
        icmp_ln803_25_reg_8083 <= icmp_ln803_25_fu_3919_p2;
        icmp_ln803_26_reg_8104 <= icmp_ln803_26_fu_4027_p2;
        icmp_ln803_27_reg_8109 <= icmp_ln803_27_fu_4033_p2;
        icmp_ln803_28_reg_8130 <= icmp_ln803_28_fu_4141_p2;
        icmp_ln803_29_reg_8135 <= icmp_ln803_29_fu_4147_p2;
        icmp_ln803_2_reg_7792 <= icmp_ln803_2_fu_2659_p2;
        icmp_ln803_30_reg_8156 <= icmp_ln803_30_fu_4383_p2;
        icmp_ln803_31_reg_8161 <= icmp_ln803_31_fu_4389_p2;
        icmp_ln803_3_reg_7797 <= icmp_ln803_3_fu_2665_p2;
        icmp_ln803_4_reg_7818 <= icmp_ln803_4_fu_2773_p2;
        icmp_ln803_5_reg_7823 <= icmp_ln803_5_fu_2779_p2;
        icmp_ln803_6_reg_7844 <= icmp_ln803_6_fu_2887_p2;
        icmp_ln803_7_reg_7849 <= icmp_ln803_7_fu_2893_p2;
        icmp_ln803_8_reg_7870 <= icmp_ln803_8_fu_3001_p2;
        icmp_ln803_9_reg_7875 <= icmp_ln803_9_fu_3007_p2;
        icmp_ln803_reg_7766 <= icmp_ln803_fu_2545_p2;
        k_1_reg_7325 <= ap_sig_allocacmp_k_1;
        or_ln800_10_reg_7880 <= or_ln800_10_fu_3071_p2;
        or_ln800_12_reg_7906 <= or_ln800_12_fu_3185_p2;
        or_ln800_14_reg_7932 <= or_ln800_14_fu_3299_p2;
        or_ln800_16_reg_7958 <= or_ln800_16_fu_3413_p2;
        or_ln800_18_reg_7984 <= or_ln800_18_fu_3527_p2;
        or_ln800_20_reg_8010 <= or_ln800_20_fu_3641_p2;
        or_ln800_22_reg_8036 <= or_ln800_22_fu_3755_p2;
        or_ln800_24_reg_8062 <= or_ln800_24_fu_3869_p2;
        or_ln800_26_reg_8088 <= or_ln800_26_fu_3983_p2;
        or_ln800_28_reg_8114 <= or_ln800_28_fu_4097_p2;
        or_ln800_2_reg_7776 <= or_ln800_2_fu_2615_p2;
        or_ln800_30_reg_8140 <= or_ln800_30_fu_4339_p2;
        or_ln800_4_reg_7802 <= or_ln800_4_fu_2729_p2;
        or_ln800_6_reg_7828 <= or_ln800_6_fu_2843_p2;
        or_ln800_8_reg_7854 <= or_ln800_8_fu_2957_p2;
        or_ln800_reg_7750 <= or_ln800_fu_2501_p2;
        p_load130_reg_7551 <= ap_sig_allocacmp_p_load130;
        p_load131_reg_7544 <= ap_sig_allocacmp_p_load131;
        p_load132_reg_7537 <= ap_sig_allocacmp_p_load132;
        p_load133_reg_7530 <= ap_sig_allocacmp_p_load133;
        p_load134_reg_7523 <= ap_sig_allocacmp_p_load134;
        p_load135_reg_7516 <= ap_sig_allocacmp_p_load135;
        p_load136_reg_7509 <= ap_sig_allocacmp_p_load136;
        p_load137_reg_7502 <= ap_sig_allocacmp_p_load137;
        p_load138_reg_7495 <= ap_sig_allocacmp_p_load138;
        p_load139_reg_7488 <= ap_sig_allocacmp_p_load139;
        p_load140_reg_7481 <= ap_sig_allocacmp_p_load140;
        p_load141_reg_7474 <= ap_sig_allocacmp_p_load141;
        p_load142_reg_7467 <= ap_sig_allocacmp_p_load142;
        p_load143_reg_7460 <= ap_sig_allocacmp_p_load143;
        p_load144_reg_7453 <= ap_sig_allocacmp_p_load144;
        p_load145_reg_7446 <= ap_sig_allocacmp_p_load145;
        p_load146_reg_7439 <= ap_sig_allocacmp_p_load146;
        p_load147_reg_7432 <= ap_sig_allocacmp_p_load147;
        p_load148_reg_7425 <= ap_sig_allocacmp_p_load148;
        p_load149_reg_7418 <= ap_sig_allocacmp_p_load149;
        p_load150_reg_7411 <= ap_sig_allocacmp_p_load150;
        p_load151_reg_7404 <= ap_sig_allocacmp_p_load151;
        p_load152_reg_7397 <= ap_sig_allocacmp_p_load152;
        p_load153_reg_7390 <= ap_sig_allocacmp_p_load153;
        p_load154_reg_7383 <= ap_sig_allocacmp_p_load154;
        p_load155_reg_7376 <= ap_sig_allocacmp_p_load155;
        p_load156_reg_7369 <= ap_sig_allocacmp_p_load156;
        p_load157_reg_7362 <= ap_sig_allocacmp_p_load157;
        p_load158_reg_7355 <= ap_sig_allocacmp_p_load158;
        p_load159_reg_7348 <= ap_sig_allocacmp_p_load159;
        p_load160_reg_7341 <= ap_sig_allocacmp_p_load160;
        p_load161_reg_7334 <= ap_sig_allocacmp_p_load161;
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1072_p0 <= bitcast_ln91_fu_2377_p1;
        grp_fu_1072_p1 <= ap_sig_allocacmp_p_load161;
        grp_fu_1076_p0 <= bitcast_ln91_fu_2377_p1;
        grp_fu_1076_p1 <= ap_sig_allocacmp_p_load160;
        grp_fu_1080_p0 <= bitcast_ln91_1_fu_2382_p1;
        grp_fu_1080_p1 <= ap_sig_allocacmp_p_load159;
        grp_fu_1084_p0 <= bitcast_ln91_1_fu_2382_p1;
        grp_fu_1084_p1 <= ap_sig_allocacmp_p_load158;
        grp_fu_1088_p0 <= bitcast_ln91_2_fu_2387_p1;
        grp_fu_1088_p1 <= ap_sig_allocacmp_p_load157;
        grp_fu_1092_p0 <= bitcast_ln91_2_fu_2387_p1;
        grp_fu_1092_p1 <= ap_sig_allocacmp_p_load156;
        grp_fu_1096_p0 <= bitcast_ln91_3_fu_2392_p1;
        grp_fu_1096_p1 <= ap_sig_allocacmp_p_load155;
        grp_fu_1100_p0 <= bitcast_ln91_3_fu_2392_p1;
        grp_fu_1100_p1 <= ap_sig_allocacmp_p_load154;
        grp_fu_1104_p0 <= bitcast_ln91_4_fu_2397_p1;
        grp_fu_1104_p1 <= ap_sig_allocacmp_p_load153;
        grp_fu_1108_p0 <= bitcast_ln91_4_fu_2397_p1;
        grp_fu_1108_p1 <= ap_sig_allocacmp_p_load152;
        grp_fu_1112_p0 <= bitcast_ln91_5_fu_2402_p1;
        grp_fu_1112_p1 <= ap_sig_allocacmp_p_load151;
        grp_fu_1116_p0 <= bitcast_ln91_5_fu_2402_p1;
        grp_fu_1116_p1 <= ap_sig_allocacmp_p_load150;
        grp_fu_1120_p0 <= bitcast_ln91_6_fu_2407_p1;
        grp_fu_1120_p1 <= ap_sig_allocacmp_p_load149;
        grp_fu_1124_p0 <= bitcast_ln91_6_fu_2407_p1;
        grp_fu_1124_p1 <= ap_sig_allocacmp_p_load148;
        grp_fu_1128_p0 <= bitcast_ln91_7_fu_2412_p1;
        grp_fu_1128_p1 <= ap_sig_allocacmp_p_load147;
        grp_fu_1132_p0 <= bitcast_ln91_7_fu_2412_p1;
        grp_fu_1132_p1 <= ap_sig_allocacmp_p_load146;
        grp_fu_1136_p0 <= bitcast_ln91_8_fu_2417_p1;
        grp_fu_1136_p1 <= ap_sig_allocacmp_p_load145;
        grp_fu_1140_p0 <= bitcast_ln91_8_fu_2417_p1;
        grp_fu_1140_p1 <= ap_sig_allocacmp_p_load144;
        grp_fu_1144_p0 <= bitcast_ln91_9_fu_2422_p1;
        grp_fu_1144_p1 <= ap_sig_allocacmp_p_load143;
        grp_fu_1148_p0 <= bitcast_ln91_9_fu_2422_p1;
        grp_fu_1148_p1 <= ap_sig_allocacmp_p_load142;
        grp_fu_1152_p0 <= bitcast_ln91_10_fu_2427_p1;
        grp_fu_1152_p1 <= ap_sig_allocacmp_p_load141;
        grp_fu_1156_p0 <= bitcast_ln91_10_fu_2427_p1;
        grp_fu_1156_p1 <= ap_sig_allocacmp_p_load140;
        grp_fu_1160_p0 <= bitcast_ln91_11_fu_2432_p1;
        grp_fu_1160_p1 <= ap_sig_allocacmp_p_load139;
        grp_fu_1164_p0 <= bitcast_ln91_11_fu_2432_p1;
        grp_fu_1164_p1 <= ap_sig_allocacmp_p_load138;
        grp_fu_1168_p0 <= bitcast_ln91_12_fu_2437_p1;
        grp_fu_1168_p1 <= ap_sig_allocacmp_p_load137;
        grp_fu_1172_p0 <= bitcast_ln91_12_fu_2437_p1;
        grp_fu_1172_p1 <= ap_sig_allocacmp_p_load136;
        grp_fu_1176_p0 <= bitcast_ln91_13_fu_2442_p1;
        grp_fu_1176_p1 <= ap_sig_allocacmp_p_load135;
        grp_fu_1180_p0 <= bitcast_ln91_13_fu_2442_p1;
        grp_fu_1180_p1 <= ap_sig_allocacmp_p_load134;
        grp_fu_1184_p0 <= bitcast_ln91_14_fu_2447_p1;
        grp_fu_1184_p1 <= ap_sig_allocacmp_p_load133;
        grp_fu_1188_p0 <= bitcast_ln91_14_fu_2447_p1;
        grp_fu_1188_p1 <= ap_sig_allocacmp_p_load132;
        grp_fu_1192_p0 <= bitcast_ln91_15_fu_2452_p1;
        grp_fu_1192_p1 <= ap_sig_allocacmp_p_load131;
        grp_fu_1196_p0 <= bitcast_ln91_15_fu_2452_p1;
        grp_fu_1196_p1 <= ap_sig_allocacmp_p_load130;
    end
end
always @ (*) begin
    if (((icmp_ln795_fu_1992_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end
always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_1 = 12'd0;
    end else begin
        ap_sig_allocacmp_k_1 = k_fu_566;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load130 = select_ln803_30_fu_5485_p3;
    end else begin
        ap_sig_allocacmp_p_load130 = empty_51_fu_434;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load131 = select_ln800_30_fu_5457_p3;
    end else begin
        ap_sig_allocacmp_p_load131 = empty_50_fu_430;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load132 = select_ln803_28_fu_5429_p3;
    end else begin
        ap_sig_allocacmp_p_load132 = empty_49_fu_426;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load133 = select_ln800_28_fu_5401_p3;
    end else begin
        ap_sig_allocacmp_p_load133 = empty_48_fu_422;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load134 = select_ln803_26_fu_5373_p3;
    end else begin
        ap_sig_allocacmp_p_load134 = empty_47_fu_418;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load135 = select_ln800_26_fu_5345_p3;
    end else begin
        ap_sig_allocacmp_p_load135 = empty_46_fu_414;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load136 = select_ln803_24_fu_5317_p3;
    end else begin
        ap_sig_allocacmp_p_load136 = empty_45_fu_410;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load137 = select_ln800_24_fu_5289_p3;
    end else begin
        ap_sig_allocacmp_p_load137 = empty_44_fu_406;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load138 = select_ln803_22_fu_5261_p3;
    end else begin
        ap_sig_allocacmp_p_load138 = empty_43_fu_402;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load139 = select_ln800_22_fu_5233_p3;
    end else begin
        ap_sig_allocacmp_p_load139 = empty_42_fu_398;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load140 = select_ln803_20_fu_5205_p3;
    end else begin
        ap_sig_allocacmp_p_load140 = empty_41_fu_394;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load141 = select_ln800_20_fu_5177_p3;
    end else begin
        ap_sig_allocacmp_p_load141 = empty_40_fu_390;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load142 = select_ln803_18_fu_5149_p3;
    end else begin
        ap_sig_allocacmp_p_load142 = empty_39_fu_386;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load143 = select_ln800_18_fu_5121_p3;
    end else begin
        ap_sig_allocacmp_p_load143 = empty_38_fu_382;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load144 = select_ln803_16_fu_5093_p3;
    end else begin
        ap_sig_allocacmp_p_load144 = empty_37_fu_378;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load145 = select_ln800_16_fu_5065_p3;
    end else begin
        ap_sig_allocacmp_p_load145 = empty_36_fu_374;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load146 = select_ln803_14_fu_5037_p3;
    end else begin
        ap_sig_allocacmp_p_load146 = empty_35_fu_370;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load147 = select_ln800_14_fu_5009_p3;
    end else begin
        ap_sig_allocacmp_p_load147 = empty_34_fu_366;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load148 = select_ln803_12_fu_4981_p3;
    end else begin
        ap_sig_allocacmp_p_load148 = empty_33_fu_362;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load149 = select_ln800_12_fu_4953_p3;
    end else begin
        ap_sig_allocacmp_p_load149 = empty_32_fu_358;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load150 = select_ln803_10_fu_4925_p3;
    end else begin
        ap_sig_allocacmp_p_load150 = empty_31_fu_354;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load151 = select_ln800_10_fu_4897_p3;
    end else begin
        ap_sig_allocacmp_p_load151 = empty_30_fu_350;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load152 = select_ln803_8_fu_4869_p3;
    end else begin
        ap_sig_allocacmp_p_load152 = empty_29_fu_346;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load153 = select_ln800_8_fu_4841_p3;
    end else begin
        ap_sig_allocacmp_p_load153 = empty_28_fu_342;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load154 = select_ln803_6_fu_4813_p3;
    end else begin
        ap_sig_allocacmp_p_load154 = empty_27_fu_338;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load155 = select_ln800_6_fu_4785_p3;
    end else begin
        ap_sig_allocacmp_p_load155 = empty_26_fu_334;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load156 = select_ln803_4_fu_4757_p3;
    end else begin
        ap_sig_allocacmp_p_load156 = empty_25_fu_330;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load157 = select_ln800_4_fu_4729_p3;
    end else begin
        ap_sig_allocacmp_p_load157 = empty_24_fu_326;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load158 = select_ln803_2_fu_4701_p3;
    end else begin
        ap_sig_allocacmp_p_load158 = empty_23_fu_322;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load159 = select_ln800_2_fu_4673_p3;
    end else begin
        ap_sig_allocacmp_p_load159 = empty_22_fu_318;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load160 = select_ln803_fu_4645_p3;
    end else begin
        ap_sig_allocacmp_p_load160 = empty_21_fu_314;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_sig_allocacmp_p_load161 = select_ln800_fu_4617_p3;
    end else begin
        ap_sig_allocacmp_p_load161 = empty_fu_310;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_10_ce1_local = 1'b1;
    end else begin
        input_buffer_10_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_10_we1_local = 1'b1;
    end else begin
        input_buffer_10_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_11_ce1_local = 1'b1;
    end else begin
        input_buffer_11_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_11_we1_local = 1'b1;
    end else begin
        input_buffer_11_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_12_ce1_local = 1'b1;
    end else begin
        input_buffer_12_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_12_we1_local = 1'b1;
    end else begin
        input_buffer_12_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_13_ce1_local = 1'b1;
    end else begin
        input_buffer_13_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_13_we1_local = 1'b1;
    end else begin
        input_buffer_13_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_14_ce1_local = 1'b1;
    end else begin
        input_buffer_14_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_14_we1_local = 1'b1;
    end else begin
        input_buffer_14_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_15_ce1_local = 1'b1;
    end else begin
        input_buffer_15_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_15_we1_local = 1'b1;
    end else begin
        input_buffer_15_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_1_ce1_local = 1'b1;
    end else begin
        input_buffer_1_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_1_we1_local = 1'b1;
    end else begin
        input_buffer_1_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_2_ce1_local = 1'b1;
    end else begin
        input_buffer_2_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_2_we1_local = 1'b1;
    end else begin
        input_buffer_2_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_3_ce1_local = 1'b1;
    end else begin
        input_buffer_3_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_3_we1_local = 1'b1;
    end else begin
        input_buffer_3_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_4_ce1_local = 1'b1;
    end else begin
        input_buffer_4_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_4_we1_local = 1'b1;
    end else begin
        input_buffer_4_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_5_ce1_local = 1'b1;
    end else begin
        input_buffer_5_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_5_we1_local = 1'b1;
    end else begin
        input_buffer_5_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_6_ce1_local = 1'b1;
    end else begin
        input_buffer_6_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_6_we1_local = 1'b1;
    end else begin
        input_buffer_6_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_7_ce1_local = 1'b1;
    end else begin
        input_buffer_7_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_7_we1_local = 1'b1;
    end else begin
        input_buffer_7_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_8_ce1_local = 1'b1;
    end else begin
        input_buffer_8_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_8_we1_local = 1'b1;
    end else begin
        input_buffer_8_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_9_ce1_local = 1'b1;
    end else begin
        input_buffer_9_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_9_we1_local = 1'b1;
    end else begin
        input_buffer_9_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_ce1_local = 1'b1;
    end else begin
        input_buffer_ce1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_buffer_we1_local = 1'b1;
    end else begin
        input_buffer_we1_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_stream_s_blk_n = input_stream_s_empty_n;
    end else begin
        input_stream_s_blk_n = 1'b1;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_stream_s_read_local = 1'b1;
    end else begin
        input_stream_s_read_local = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out10_ap_vld = 1'b1;
    end else begin
        p_out10_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out11_ap_vld = 1'b1;
    end else begin
        p_out11_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out12_ap_vld = 1'b1;
    end else begin
        p_out12_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out13_ap_vld = 1'b1;
    end else begin
        p_out13_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out14_ap_vld = 1'b1;
    end else begin
        p_out14_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out15_ap_vld = 1'b1;
    end else begin
        p_out15_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out16_ap_vld = 1'b1;
    end else begin
        p_out16_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out17_ap_vld = 1'b1;
    end else begin
        p_out17_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out18_ap_vld = 1'b1;
    end else begin
        p_out18_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out19_ap_vld = 1'b1;
    end else begin
        p_out19_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out20_ap_vld = 1'b1;
    end else begin
        p_out20_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out21_ap_vld = 1'b1;
    end else begin
        p_out21_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out22_ap_vld = 1'b1;
    end else begin
        p_out22_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out23_ap_vld = 1'b1;
    end else begin
        p_out23_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out24_ap_vld = 1'b1;
    end else begin
        p_out24_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out25_ap_vld = 1'b1;
    end else begin
        p_out25_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out26_ap_vld = 1'b1;
    end else begin
        p_out26_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out27_ap_vld = 1'b1;
    end else begin
        p_out27_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out28_ap_vld = 1'b1;
    end else begin
        p_out28_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out29_ap_vld = 1'b1;
    end else begin
        p_out29_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out2_ap_vld = 1'b1;
    end else begin
        p_out2_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out30_ap_vld = 1'b1;
    end else begin
        p_out30_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out31_ap_vld = 1'b1;
    end else begin
        p_out31_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out3_ap_vld = 1'b1;
    end else begin
        p_out3_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out4_ap_vld = 1'b1;
    end else begin
        p_out4_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out5_ap_vld = 1'b1;
    end else begin
        p_out5_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out6_ap_vld = 1'b1;
    end else begin
        p_out6_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out7_ap_vld = 1'b1;
    end else begin
        p_out7_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out8_ap_vld = 1'b1;
    end else begin
        p_out8_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out9_ap_vld = 1'b1;
    end else begin
        p_out9_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln795_reg_7330 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign add_ln795_fu_1986_p2 = (ap_sig_allocacmp_k_1 + 12'd1);
assign and_ln800_10_fu_4879_p2 = (or_ln800_11_fu_4875_p2 & or_ln800_10_reg_7880);
assign and_ln800_11_fu_4884_p2 = (grp_fu_1112_p2 & and_ln800_10_fu_4879_p2);
assign and_ln800_12_fu_4935_p2 = (or_ln800_13_fu_4931_p2 & or_ln800_12_reg_7906);
assign and_ln800_13_fu_4940_p2 = (grp_fu_1120_p2 & and_ln800_12_fu_4935_p2);
assign and_ln800_14_fu_4991_p2 = (or_ln800_15_fu_4987_p2 & or_ln800_14_reg_7932);
assign and_ln800_15_fu_4996_p2 = (grp_fu_1128_p2 & and_ln800_14_fu_4991_p2);
assign and_ln800_16_fu_5047_p2 = (or_ln800_17_fu_5043_p2 & or_ln800_16_reg_7958);
assign and_ln800_17_fu_5052_p2 = (grp_fu_1136_p2 & and_ln800_16_fu_5047_p2);
assign and_ln800_18_fu_5103_p2 = (or_ln800_19_fu_5099_p2 & or_ln800_18_reg_7984);
assign and_ln800_19_fu_5108_p2 = (grp_fu_1144_p2 & and_ln800_18_fu_5103_p2);
assign and_ln800_1_fu_4604_p2 = (grp_fu_1072_p2 & and_ln800_fu_4599_p2);
assign and_ln800_20_fu_5159_p2 = (or_ln800_21_fu_5155_p2 & or_ln800_20_reg_8010);
assign and_ln800_21_fu_5164_p2 = (grp_fu_1152_p2 & and_ln800_20_fu_5159_p2);
assign and_ln800_22_fu_5215_p2 = (or_ln800_22_reg_8036 & grp_fu_1160_p2);
assign and_ln800_23_fu_5220_p2 = (or_ln800_23_fu_5211_p2 & and_ln800_22_fu_5215_p2);
assign and_ln800_24_fu_5271_p2 = (or_ln800_24_reg_8062 & grp_fu_1168_p2);
assign and_ln800_25_fu_5276_p2 = (or_ln800_25_fu_5267_p2 & and_ln800_24_fu_5271_p2);
assign and_ln800_26_fu_5327_p2 = (or_ln800_26_reg_8088 & grp_fu_1176_p2);
assign and_ln800_27_fu_5332_p2 = (or_ln800_27_fu_5323_p2 & and_ln800_26_fu_5327_p2);
assign and_ln800_28_fu_5383_p2 = (or_ln800_28_reg_8114 & grp_fu_1184_p2);
assign and_ln800_29_fu_5388_p2 = (or_ln800_29_fu_5379_p2 & and_ln800_28_fu_5383_p2);
assign and_ln800_2_fu_4655_p2 = (or_ln800_3_fu_4651_p2 & or_ln800_2_reg_7776);
assign and_ln800_30_fu_5439_p2 = (or_ln800_30_reg_8140 & grp_fu_1192_p2);
assign and_ln800_31_fu_5444_p2 = (or_ln800_31_fu_5435_p2 & and_ln800_30_fu_5439_p2);
assign and_ln800_3_fu_4660_p2 = (grp_fu_1080_p2 & and_ln800_2_fu_4655_p2);
assign and_ln800_4_fu_4711_p2 = (or_ln800_5_fu_4707_p2 & or_ln800_4_reg_7802);
assign and_ln800_5_fu_4716_p2 = (grp_fu_1088_p2 & and_ln800_4_fu_4711_p2);
assign and_ln800_6_fu_4767_p2 = (or_ln800_7_fu_4763_p2 & or_ln800_6_reg_7828);
assign and_ln800_7_fu_4772_p2 = (grp_fu_1096_p2 & and_ln800_6_fu_4767_p2);
assign and_ln800_8_fu_4823_p2 = (or_ln800_9_fu_4819_p2 & or_ln800_8_reg_7854);
assign and_ln800_9_fu_4828_p2 = (grp_fu_1104_p2 & and_ln800_8_fu_4823_p2);
assign and_ln800_fu_4599_p2 = (or_ln800_reg_7750 & or_ln800_1_fu_4595_p2);
assign and_ln803_10_fu_4907_p2 = (or_ln803_5_fu_4903_p2 & or_ln800_10_reg_7880);
assign and_ln803_11_fu_4912_p2 = (grp_fu_1116_p2 & and_ln803_10_fu_4907_p2);
assign and_ln803_12_fu_4963_p2 = (or_ln803_6_fu_4959_p2 & or_ln800_12_reg_7906);
assign and_ln803_13_fu_4968_p2 = (grp_fu_1124_p2 & and_ln803_12_fu_4963_p2);
assign and_ln803_14_fu_5019_p2 = (or_ln803_7_fu_5015_p2 & or_ln800_14_reg_7932);
assign and_ln803_15_fu_5024_p2 = (grp_fu_1132_p2 & and_ln803_14_fu_5019_p2);
assign and_ln803_16_fu_5075_p2 = (or_ln803_8_fu_5071_p2 & or_ln800_16_reg_7958);
assign and_ln803_17_fu_5080_p2 = (grp_fu_1140_p2 & and_ln803_16_fu_5075_p2);
assign and_ln803_18_fu_5131_p2 = (or_ln803_9_fu_5127_p2 & or_ln800_18_reg_7984);
assign and_ln803_19_fu_5136_p2 = (grp_fu_1148_p2 & and_ln803_18_fu_5131_p2);
assign and_ln803_1_fu_4632_p2 = (grp_fu_1076_p2 & and_ln803_fu_4627_p2);
assign and_ln803_20_fu_5187_p2 = (or_ln803_10_fu_5183_p2 & or_ln800_20_reg_8010);
assign and_ln803_21_fu_5192_p2 = (grp_fu_1156_p2 & and_ln803_20_fu_5187_p2);
assign and_ln803_22_fu_5243_p2 = (or_ln800_22_reg_8036 & grp_fu_1164_p2);
assign and_ln803_23_fu_5248_p2 = (or_ln803_11_fu_5239_p2 & and_ln803_22_fu_5243_p2);
assign and_ln803_24_fu_5299_p2 = (or_ln800_24_reg_8062 & grp_fu_1172_p2);
assign and_ln803_25_fu_5304_p2 = (or_ln803_12_fu_5295_p2 & and_ln803_24_fu_5299_p2);
assign and_ln803_26_fu_5355_p2 = (or_ln800_26_reg_8088 & grp_fu_1180_p2);
assign and_ln803_27_fu_5360_p2 = (or_ln803_13_fu_5351_p2 & and_ln803_26_fu_5355_p2);
assign and_ln803_28_fu_5411_p2 = (or_ln800_28_reg_8114 & grp_fu_1188_p2);
assign and_ln803_29_fu_5416_p2 = (or_ln803_14_fu_5407_p2 & and_ln803_28_fu_5411_p2);
assign and_ln803_2_fu_4683_p2 = (or_ln803_1_fu_4679_p2 & or_ln800_2_reg_7776);
assign and_ln803_30_fu_5467_p2 = (or_ln800_30_reg_8140 & grp_fu_1196_p2);
assign and_ln803_31_fu_5472_p2 = (or_ln803_15_fu_5463_p2 & and_ln803_30_fu_5467_p2);
assign and_ln803_3_fu_4688_p2 = (grp_fu_1084_p2 & and_ln803_2_fu_4683_p2);
assign and_ln803_4_fu_4739_p2 = (or_ln803_2_fu_4735_p2 & or_ln800_4_reg_7802);
assign and_ln803_5_fu_4744_p2 = (grp_fu_1092_p2 & and_ln803_4_fu_4739_p2);
assign and_ln803_6_fu_4795_p2 = (or_ln803_3_fu_4791_p2 & or_ln800_6_reg_7828);
assign and_ln803_7_fu_4800_p2 = (grp_fu_1100_p2 & and_ln803_6_fu_4795_p2);
assign and_ln803_8_fu_4851_p2 = (or_ln803_4_fu_4847_p2 & or_ln800_8_reg_7854);
assign and_ln803_9_fu_4856_p2 = (grp_fu_1108_p2 & and_ln803_8_fu_4851_p2);
assign and_ln803_fu_4627_p2 = (or_ln803_fu_4623_p2 & or_ln800_reg_7750);
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_block_pp0_stage0_00001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end
always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end
always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end
always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end
always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (input_stream_s_empty_n == 1'b0);
end
assign ap_done = ap_done_sig;
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_enable_reg_pp0_iter0 = ap_start_int;
assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;
assign ap_ready = ap_ready_sig;
assign bitcast_ln800_10_fu_3611_p1 = ap_sig_allocacmp_p_load141;
assign bitcast_ln800_11_fu_3725_p1 = ap_sig_allocacmp_p_load139;
assign bitcast_ln800_12_fu_3839_p1 = ap_sig_allocacmp_p_load137;
assign bitcast_ln800_13_fu_3953_p1 = ap_sig_allocacmp_p_load135;
assign bitcast_ln800_14_fu_4067_p1 = ap_sig_allocacmp_p_load133;
assign bitcast_ln800_15_fu_4309_p1 = ap_sig_allocacmp_p_load131;
assign bitcast_ln800_1_fu_2585_p1 = ap_sig_allocacmp_p_load159;
assign bitcast_ln800_2_fu_2699_p1 = ap_sig_allocacmp_p_load157;
assign bitcast_ln800_3_fu_2813_p1 = ap_sig_allocacmp_p_load155;
assign bitcast_ln800_4_fu_2927_p1 = ap_sig_allocacmp_p_load153;
assign bitcast_ln800_5_fu_3041_p1 = ap_sig_allocacmp_p_load151;
assign bitcast_ln800_6_fu_3155_p1 = ap_sig_allocacmp_p_load149;
assign bitcast_ln800_7_fu_3269_p1 = ap_sig_allocacmp_p_load147;
assign bitcast_ln800_8_fu_3383_p1 = ap_sig_allocacmp_p_load145;
assign bitcast_ln800_9_fu_3497_p1 = ap_sig_allocacmp_p_load143;
assign bitcast_ln800_fu_2471_p1 = ap_sig_allocacmp_p_load161;
assign bitcast_ln803_10_fu_3667_p1 = ap_sig_allocacmp_p_load140;
assign bitcast_ln803_11_fu_3781_p1 = ap_sig_allocacmp_p_load138;
assign bitcast_ln803_12_fu_3895_p1 = ap_sig_allocacmp_p_load136;
assign bitcast_ln803_13_fu_4009_p1 = ap_sig_allocacmp_p_load134;
assign bitcast_ln803_14_fu_4123_p1 = ap_sig_allocacmp_p_load132;
assign bitcast_ln803_15_fu_4365_p1 = ap_sig_allocacmp_p_load130;
assign bitcast_ln803_1_fu_2641_p1 = ap_sig_allocacmp_p_load158;
assign bitcast_ln803_2_fu_2755_p1 = ap_sig_allocacmp_p_load156;
assign bitcast_ln803_3_fu_2869_p1 = ap_sig_allocacmp_p_load154;
assign bitcast_ln803_4_fu_2983_p1 = ap_sig_allocacmp_p_load152;
assign bitcast_ln803_5_fu_3097_p1 = ap_sig_allocacmp_p_load150;
assign bitcast_ln803_6_fu_3211_p1 = ap_sig_allocacmp_p_load148;
assign bitcast_ln803_7_fu_3325_p1 = ap_sig_allocacmp_p_load146;
assign bitcast_ln803_8_fu_3439_p1 = ap_sig_allocacmp_p_load144;
assign bitcast_ln803_9_fu_3553_p1 = ap_sig_allocacmp_p_load142;
assign bitcast_ln803_fu_2527_p1 = ap_sig_allocacmp_p_load160;
assign bitcast_ln91_10_fu_2427_p1 = trunc_ln91_1_fu_2317_p4;
assign bitcast_ln91_11_fu_2432_p1 = trunc_ln91_10_fu_2327_p4;
assign bitcast_ln91_12_fu_2437_p1 = trunc_ln91_11_fu_2337_p4;
assign bitcast_ln91_13_fu_2442_p1 = trunc_ln91_12_fu_2347_p4;
assign bitcast_ln91_14_fu_2447_p1 = trunc_ln91_13_fu_2357_p4;
assign bitcast_ln91_15_fu_2452_p1 = trunc_ln91_14_fu_2367_p4;
assign bitcast_ln91_1_fu_2382_p1 = trunc_ln91_2_fu_2227_p4;
assign bitcast_ln91_2_fu_2387_p1 = trunc_ln91_3_fu_2237_p4;
assign bitcast_ln91_3_fu_2392_p1 = trunc_ln91_4_fu_2247_p4;
assign bitcast_ln91_4_fu_2397_p1 = trunc_ln91_5_fu_2257_p4;
assign bitcast_ln91_5_fu_2402_p1 = trunc_ln91_6_fu_2267_p4;
assign bitcast_ln91_6_fu_2407_p1 = trunc_ln91_7_fu_2277_p4;
assign bitcast_ln91_7_fu_2412_p1 = trunc_ln91_8_fu_2287_p4;
assign bitcast_ln91_8_fu_2417_p1 = trunc_ln91_9_fu_2297_p4;
assign bitcast_ln91_9_fu_2422_p1 = trunc_ln91_s_fu_2307_p4;
assign bitcast_ln91_fu_2377_p1 = trunc_ln91_fu_2223_p1;
assign grp_fu_1072_opcode = 5'd2;
assign grp_fu_1076_opcode = 5'd4;
assign grp_fu_1080_opcode = 5'd2;
assign grp_fu_1084_opcode = 5'd4;
assign grp_fu_1088_opcode = 5'd2;
assign grp_fu_1092_opcode = 5'd4;
assign grp_fu_1096_opcode = 5'd2;
assign grp_fu_1100_opcode = 5'd4;
assign grp_fu_1104_opcode = 5'd2;
assign grp_fu_1108_opcode = 5'd4;
assign grp_fu_1112_opcode = 5'd2;
assign grp_fu_1116_opcode = 5'd4;
assign grp_fu_1120_opcode = 5'd2;
assign grp_fu_1124_opcode = 5'd4;
assign grp_fu_1128_opcode = 5'd2;
assign grp_fu_1132_opcode = 5'd4;
assign grp_fu_1136_opcode = 5'd2;
assign grp_fu_1140_opcode = 5'd4;
assign grp_fu_1144_opcode = 5'd2;
assign grp_fu_1148_opcode = 5'd4;
assign grp_fu_1152_opcode = 5'd2;
assign grp_fu_1156_opcode = 5'd4;
assign grp_fu_1160_opcode = 5'd2;
assign grp_fu_1164_opcode = 5'd4;
assign grp_fu_1168_opcode = 5'd2;
assign grp_fu_1172_opcode = 5'd4;
assign grp_fu_1176_opcode = 5'd2;
assign grp_fu_1180_opcode = 5'd4;
assign grp_fu_1184_opcode = 5'd2;
assign grp_fu_1188_opcode = 5'd4;
assign grp_fu_1192_opcode = 5'd2;
assign grp_fu_1196_opcode = 5'd4;
assign icmp_ln795_fu_1992_p2 = ((ap_sig_allocacmp_k_1 == 12'd2048) ? 1'b1 : 1'b0);
assign icmp_ln800_10_fu_2735_p2 = ((tmp_10_fu_2703_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_11_fu_2741_p2 = ((trunc_ln800_5_fu_2713_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_12_fu_2831_p2 = ((tmp_14_fu_2793_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_13_fu_2837_p2 = ((trunc_ln800_6_fu_2803_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_14_fu_2849_p2 = ((tmp_15_fu_2817_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_15_fu_2855_p2 = ((trunc_ln800_7_fu_2827_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_16_fu_2945_p2 = ((tmp_19_fu_2907_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_17_fu_2951_p2 = ((trunc_ln800_8_fu_2917_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_18_fu_2963_p2 = ((tmp_20_fu_2931_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_19_fu_2969_p2 = ((trunc_ln800_9_fu_2941_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_1_fu_2495_p2 = ((trunc_ln800_fu_2467_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_20_fu_3059_p2 = ((tmp_24_fu_3021_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_21_fu_3065_p2 = ((trunc_ln800_s_fu_3031_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_22_fu_3077_p2 = ((tmp_25_fu_3045_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_23_fu_3083_p2 = ((trunc_ln800_10_fu_3055_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_24_fu_3173_p2 = ((tmp_29_fu_3135_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_25_fu_3179_p2 = ((trunc_ln800_11_fu_3145_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_26_fu_3191_p2 = ((tmp_30_fu_3159_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_27_fu_3197_p2 = ((trunc_ln800_12_fu_3169_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_28_fu_3287_p2 = ((tmp_34_fu_3249_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_29_fu_3293_p2 = ((trunc_ln800_13_fu_3259_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_2_fu_2507_p2 = ((tmp_9_fu_2475_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_30_fu_3305_p2 = ((tmp_35_fu_3273_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_31_fu_3311_p2 = ((trunc_ln800_14_fu_3283_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_32_fu_3401_p2 = ((tmp_39_fu_3363_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_33_fu_3407_p2 = ((trunc_ln800_15_fu_3373_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_34_fu_3419_p2 = ((tmp_40_fu_3387_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_35_fu_3425_p2 = ((trunc_ln800_16_fu_3397_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_36_fu_3515_p2 = ((tmp_44_fu_3477_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_37_fu_3521_p2 = ((trunc_ln800_17_fu_3487_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_38_fu_3533_p2 = ((tmp_45_fu_3501_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_39_fu_3539_p2 = ((trunc_ln800_18_fu_3511_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_3_fu_2513_p2 = ((trunc_ln800_1_fu_2485_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_40_fu_3629_p2 = ((tmp_49_fu_3591_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_41_fu_3635_p2 = ((trunc_ln800_19_fu_3601_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_42_fu_3647_p2 = ((tmp_50_fu_3615_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_43_fu_3653_p2 = ((trunc_ln800_20_fu_3625_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_44_fu_3743_p2 = ((tmp_54_fu_3705_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_45_fu_3749_p2 = ((trunc_ln800_21_fu_3715_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_46_fu_3761_p2 = ((tmp_55_fu_3729_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_47_fu_3767_p2 = ((trunc_ln800_22_fu_3739_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_48_fu_3857_p2 = ((tmp_59_fu_3819_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_49_fu_3863_p2 = ((trunc_ln800_23_fu_3829_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_4_fu_2603_p2 = ((tmp_3_fu_2565_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_50_fu_3875_p2 = ((tmp_60_fu_3843_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_51_fu_3881_p2 = ((trunc_ln800_24_fu_3853_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_52_fu_3971_p2 = ((tmp_64_fu_3933_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_53_fu_3977_p2 = ((trunc_ln800_25_fu_3943_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_54_fu_3989_p2 = ((tmp_65_fu_3957_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_55_fu_3995_p2 = ((trunc_ln800_26_fu_3967_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_56_fu_4085_p2 = ((tmp_69_fu_4047_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_57_fu_4091_p2 = ((trunc_ln800_27_fu_4057_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_58_fu_4103_p2 = ((tmp_70_fu_4071_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_59_fu_4109_p2 = ((trunc_ln800_28_fu_4081_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_5_fu_2609_p2 = ((trunc_ln800_2_fu_2575_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_60_fu_4327_p2 = ((tmp_74_fu_4289_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_61_fu_4333_p2 = ((trunc_ln800_29_fu_4299_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_62_fu_4345_p2 = ((tmp_75_fu_4313_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_63_fu_4351_p2 = ((trunc_ln800_30_fu_4323_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_6_fu_2621_p2 = ((tmp_4_fu_2589_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_7_fu_2627_p2 = ((trunc_ln800_3_fu_2599_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_8_fu_2717_p2 = ((tmp_8_fu_2679_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln800_9_fu_2723_p2 = ((trunc_ln800_4_fu_2689_p4 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln800_fu_2489_p2 = ((tmp_fu_2457_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_10_fu_3115_p2 = ((tmp_27_fu_3101_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_11_fu_3121_p2 = ((trunc_ln803_5_fu_3111_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_12_fu_3229_p2 = ((tmp_32_fu_3215_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_13_fu_3235_p2 = ((trunc_ln803_6_fu_3225_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_14_fu_3343_p2 = ((tmp_37_fu_3329_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_15_fu_3349_p2 = ((trunc_ln803_7_fu_3339_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_16_fu_3457_p2 = ((tmp_42_fu_3443_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_17_fu_3463_p2 = ((trunc_ln803_8_fu_3453_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_18_fu_3571_p2 = ((tmp_47_fu_3557_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_19_fu_3577_p2 = ((trunc_ln803_9_fu_3567_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_1_fu_2551_p2 = ((trunc_ln803_fu_2541_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_20_fu_3685_p2 = ((tmp_52_fu_3671_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_21_fu_3691_p2 = ((trunc_ln803_10_fu_3681_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_22_fu_3799_p2 = ((tmp_57_fu_3785_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_23_fu_3805_p2 = ((trunc_ln803_11_fu_3795_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_24_fu_3913_p2 = ((tmp_62_fu_3899_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_25_fu_3919_p2 = ((trunc_ln803_12_fu_3909_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_26_fu_4027_p2 = ((tmp_67_fu_4013_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_27_fu_4033_p2 = ((trunc_ln803_13_fu_4023_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_28_fu_4141_p2 = ((tmp_72_fu_4127_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_29_fu_4147_p2 = ((trunc_ln803_14_fu_4137_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_2_fu_2659_p2 = ((tmp_6_fu_2645_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_30_fu_4383_p2 = ((tmp_77_fu_4369_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_31_fu_4389_p2 = ((trunc_ln803_15_fu_4379_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_3_fu_2665_p2 = ((trunc_ln803_1_fu_2655_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_4_fu_2773_p2 = ((tmp_12_fu_2759_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_5_fu_2779_p2 = ((trunc_ln803_2_fu_2769_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_6_fu_2887_p2 = ((tmp_17_fu_2873_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_7_fu_2893_p2 = ((trunc_ln803_3_fu_2883_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_8_fu_3001_p2 = ((tmp_22_fu_2987_p4 != 8'd255) ? 1'b1 : 1'b0);
assign icmp_ln803_9_fu_3007_p2 = ((trunc_ln803_4_fu_2997_p1 == 23'd0) ? 1'b1 : 1'b0);
assign icmp_ln803_fu_2545_p2 = ((tmp_1_fu_2531_p4 != 8'd255) ? 1'b1 : 1'b0);
assign input_buffer_10_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_10_ce1 = input_buffer_10_ce1_local;
assign input_buffer_10_d1 = bitcast_ln91_10_fu_2427_p1;
assign input_buffer_10_we1 = input_buffer_10_we1_local;
assign input_buffer_11_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_11_ce1 = input_buffer_11_ce1_local;
assign input_buffer_11_d1 = bitcast_ln91_11_fu_2432_p1;
assign input_buffer_11_we1 = input_buffer_11_we1_local;
assign input_buffer_12_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_12_ce1 = input_buffer_12_ce1_local;
assign input_buffer_12_d1 = bitcast_ln91_12_fu_2437_p1;
assign input_buffer_12_we1 = input_buffer_12_we1_local;
assign input_buffer_13_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_13_ce1 = input_buffer_13_ce1_local;
assign input_buffer_13_d1 = bitcast_ln91_13_fu_2442_p1;
assign input_buffer_13_we1 = input_buffer_13_we1_local;
assign input_buffer_14_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_14_ce1 = input_buffer_14_ce1_local;
assign input_buffer_14_d1 = bitcast_ln91_14_fu_2447_p1;
assign input_buffer_14_we1 = input_buffer_14_we1_local;
assign input_buffer_15_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_15_ce1 = input_buffer_15_ce1_local;
assign input_buffer_15_d1 = bitcast_ln91_15_fu_2452_p1;
assign input_buffer_15_we1 = input_buffer_15_we1_local;
assign input_buffer_1_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_1_ce1 = input_buffer_1_ce1_local;
assign input_buffer_1_d1 = bitcast_ln91_1_fu_2382_p1;
assign input_buffer_1_we1 = input_buffer_1_we1_local;
assign input_buffer_2_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_2_ce1 = input_buffer_2_ce1_local;
assign input_buffer_2_d1 = bitcast_ln91_2_fu_2387_p1;
assign input_buffer_2_we1 = input_buffer_2_we1_local;
assign input_buffer_3_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_3_ce1 = input_buffer_3_ce1_local;
assign input_buffer_3_d1 = bitcast_ln91_3_fu_2392_p1;
assign input_buffer_3_we1 = input_buffer_3_we1_local;
assign input_buffer_4_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_4_ce1 = input_buffer_4_ce1_local;
assign input_buffer_4_d1 = bitcast_ln91_4_fu_2397_p1;
assign input_buffer_4_we1 = input_buffer_4_we1_local;
assign input_buffer_5_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_5_ce1 = input_buffer_5_ce1_local;
assign input_buffer_5_d1 = bitcast_ln91_5_fu_2402_p1;
assign input_buffer_5_we1 = input_buffer_5_we1_local;
assign input_buffer_6_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_6_ce1 = input_buffer_6_ce1_local;
assign input_buffer_6_d1 = bitcast_ln91_6_fu_2407_p1;
assign input_buffer_6_we1 = input_buffer_6_we1_local;
assign input_buffer_7_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_7_ce1 = input_buffer_7_ce1_local;
assign input_buffer_7_d1 = bitcast_ln91_7_fu_2412_p1;
assign input_buffer_7_we1 = input_buffer_7_we1_local;
assign input_buffer_8_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_8_ce1 = input_buffer_8_ce1_local;
assign input_buffer_8_d1 = bitcast_ln91_8_fu_2417_p1;
assign input_buffer_8_we1 = input_buffer_8_we1_local;
assign input_buffer_9_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_9_ce1 = input_buffer_9_ce1_local;
assign input_buffer_9_d1 = bitcast_ln91_9_fu_2422_p1;
assign input_buffer_9_we1 = input_buffer_9_we1_local;
assign input_buffer_address1 = zext_ln795_fu_2202_p1;
assign input_buffer_ce1 = input_buffer_ce1_local;
assign input_buffer_d1 = bitcast_ln91_fu_2377_p1;
assign input_buffer_we1 = input_buffer_we1_local;
assign input_max_10_fu_5170_p3 = ((and_ln800_21_fu_5164_p2[0:0] == 1'b1) ? bitcast_ln91_10_reg_7678 : empty_72_fu_518);
assign input_max_11_fu_5226_p3 = ((and_ln800_23_fu_5220_p2[0:0] == 1'b1) ? bitcast_ln91_11_reg_7690 : empty_74_fu_526);
assign input_max_12_fu_5282_p3 = ((and_ln800_25_fu_5276_p2[0:0] == 1'b1) ? bitcast_ln91_12_reg_7702 : empty_76_fu_534);
assign input_max_13_fu_5338_p3 = ((and_ln800_27_fu_5332_p2[0:0] == 1'b1) ? bitcast_ln91_13_reg_7714 : empty_78_fu_542);
assign input_max_14_fu_5394_p3 = ((and_ln800_29_fu_5388_p2[0:0] == 1'b1) ? bitcast_ln91_14_reg_7726 : empty_80_fu_550);
assign input_max_15_fu_5450_p3 = ((and_ln800_31_fu_5444_p2[0:0] == 1'b1) ? bitcast_ln91_15_reg_7738 : empty_82_fu_558);
assign input_max_1_fu_4666_p3 = ((and_ln800_3_fu_4660_p2[0:0] == 1'b1) ? bitcast_ln91_1_reg_7570 : empty_54_fu_446);
assign input_max_2_fu_4722_p3 = ((and_ln800_5_fu_4716_p2[0:0] == 1'b1) ? bitcast_ln91_2_reg_7582 : empty_56_fu_454);
assign input_max_3_fu_4778_p3 = ((and_ln800_7_fu_4772_p2[0:0] == 1'b1) ? bitcast_ln91_3_reg_7594 : empty_58_fu_462);
assign input_max_4_fu_4834_p3 = ((and_ln800_9_fu_4828_p2[0:0] == 1'b1) ? bitcast_ln91_4_reg_7606 : empty_60_fu_470);
assign input_max_5_fu_4890_p3 = ((and_ln800_11_fu_4884_p2[0:0] == 1'b1) ? bitcast_ln91_5_reg_7618 : empty_62_fu_478);
assign input_max_6_fu_4946_p3 = ((and_ln800_13_fu_4940_p2[0:0] == 1'b1) ? bitcast_ln91_6_reg_7630 : empty_64_fu_486);
assign input_max_7_fu_5002_p3 = ((and_ln800_15_fu_4996_p2[0:0] == 1'b1) ? bitcast_ln91_7_reg_7642 : empty_66_fu_494);
assign input_max_8_fu_5058_p3 = ((and_ln800_17_fu_5052_p2[0:0] == 1'b1) ? bitcast_ln91_8_reg_7654 : empty_68_fu_502);
assign input_max_9_fu_5114_p3 = ((and_ln800_19_fu_5108_p2[0:0] == 1'b1) ? bitcast_ln91_9_reg_7666 : empty_70_fu_510);
assign input_max_fu_4610_p3 = ((and_ln800_1_fu_4604_p2[0:0] == 1'b1) ? bitcast_ln91_reg_7558 : empty_52_fu_438);
assign input_min_10_fu_5198_p3 = ((and_ln803_21_fu_5192_p2[0:0] == 1'b1) ? bitcast_ln91_10_reg_7678 : empty_73_fu_522);
assign input_min_11_fu_5254_p3 = ((and_ln803_23_fu_5248_p2[0:0] == 1'b1) ? bitcast_ln91_11_reg_7690 : empty_75_fu_530);
assign input_min_12_fu_5310_p3 = ((and_ln803_25_fu_5304_p2[0:0] == 1'b1) ? bitcast_ln91_12_reg_7702 : empty_77_fu_538);
assign input_min_13_fu_5366_p3 = ((and_ln803_27_fu_5360_p2[0:0] == 1'b1) ? bitcast_ln91_13_reg_7714 : empty_79_fu_546);
assign input_min_14_fu_5422_p3 = ((and_ln803_29_fu_5416_p2[0:0] == 1'b1) ? bitcast_ln91_14_reg_7726 : empty_81_fu_554);
assign input_min_15_fu_5478_p3 = ((and_ln803_31_fu_5472_p2[0:0] == 1'b1) ? bitcast_ln91_15_reg_7738 : empty_83_fu_562);
assign input_min_1_fu_4694_p3 = ((and_ln803_3_fu_4688_p2[0:0] == 1'b1) ? bitcast_ln91_1_reg_7570 : empty_55_fu_450);
assign input_min_2_fu_4750_p3 = ((and_ln803_5_fu_4744_p2[0:0] == 1'b1) ? bitcast_ln91_2_reg_7582 : empty_57_fu_458);
assign input_min_3_fu_4806_p3 = ((and_ln803_7_fu_4800_p2[0:0] == 1'b1) ? bitcast_ln91_3_reg_7594 : empty_59_fu_466);
assign input_min_4_fu_4862_p3 = ((and_ln803_9_fu_4856_p2[0:0] == 1'b1) ? bitcast_ln91_4_reg_7606 : empty_61_fu_474);
assign input_min_5_fu_4918_p3 = ((and_ln803_11_fu_4912_p2[0:0] == 1'b1) ? bitcast_ln91_5_reg_7618 : empty_63_fu_482);
assign input_min_6_fu_4974_p3 = ((and_ln803_13_fu_4968_p2[0:0] == 1'b1) ? bitcast_ln91_6_reg_7630 : empty_65_fu_490);
assign input_min_7_fu_5030_p3 = ((and_ln803_15_fu_5024_p2[0:0] == 1'b1) ? bitcast_ln91_7_reg_7642 : empty_67_fu_498);
assign input_min_8_fu_5086_p3 = ((and_ln803_17_fu_5080_p2[0:0] == 1'b1) ? bitcast_ln91_8_reg_7654 : empty_69_fu_506);
assign input_min_9_fu_5142_p3 = ((and_ln803_19_fu_5136_p2[0:0] == 1'b1) ? bitcast_ln91_9_reg_7666 : empty_71_fu_514);
assign input_min_fu_4638_p3 = ((and_ln803_1_fu_4632_p2[0:0] == 1'b1) ? bitcast_ln91_reg_7558 : empty_53_fu_442);
assign input_stream_s_read = input_stream_s_read_local;
assign or_ln800_10_fu_3071_p2 = (icmp_ln800_21_fu_3065_p2 | icmp_ln800_20_fu_3059_p2);
assign or_ln800_11_fu_4875_p2 = (icmp_ln800_23_reg_7891 | icmp_ln800_22_reg_7886);
assign or_ln800_12_fu_3185_p2 = (icmp_ln800_25_fu_3179_p2 | icmp_ln800_24_fu_3173_p2);
assign or_ln800_13_fu_4931_p2 = (icmp_ln800_27_reg_7917 | icmp_ln800_26_reg_7912);
assign or_ln800_14_fu_3299_p2 = (icmp_ln800_29_fu_3293_p2 | icmp_ln800_28_fu_3287_p2);
assign or_ln800_15_fu_4987_p2 = (icmp_ln800_31_reg_7943 | icmp_ln800_30_reg_7938);
assign or_ln800_16_fu_3413_p2 = (icmp_ln800_33_fu_3407_p2 | icmp_ln800_32_fu_3401_p2);
assign or_ln800_17_fu_5043_p2 = (icmp_ln800_35_reg_7969 | icmp_ln800_34_reg_7964);
assign or_ln800_18_fu_3527_p2 = (icmp_ln800_37_fu_3521_p2 | icmp_ln800_36_fu_3515_p2);
assign or_ln800_19_fu_5099_p2 = (icmp_ln800_39_reg_7995 | icmp_ln800_38_reg_7990);
assign or_ln800_1_fu_4595_p2 = (icmp_ln800_3_reg_7761 | icmp_ln800_2_reg_7756);
assign or_ln800_20_fu_3641_p2 = (icmp_ln800_41_fu_3635_p2 | icmp_ln800_40_fu_3629_p2);
assign or_ln800_21_fu_5155_p2 = (icmp_ln800_43_reg_8021 | icmp_ln800_42_reg_8016);
assign or_ln800_22_fu_3755_p2 = (icmp_ln800_45_fu_3749_p2 | icmp_ln800_44_fu_3743_p2);
assign or_ln800_23_fu_5211_p2 = (icmp_ln800_47_reg_8047 | icmp_ln800_46_reg_8042);
assign or_ln800_24_fu_3869_p2 = (icmp_ln800_49_fu_3863_p2 | icmp_ln800_48_fu_3857_p2);
assign or_ln800_25_fu_5267_p2 = (icmp_ln800_51_reg_8073 | icmp_ln800_50_reg_8068);
assign or_ln800_26_fu_3983_p2 = (icmp_ln800_53_fu_3977_p2 | icmp_ln800_52_fu_3971_p2);
assign or_ln800_27_fu_5323_p2 = (icmp_ln800_55_reg_8099 | icmp_ln800_54_reg_8094);
assign or_ln800_28_fu_4097_p2 = (icmp_ln800_57_fu_4091_p2 | icmp_ln800_56_fu_4085_p2);
assign or_ln800_29_fu_5379_p2 = (icmp_ln800_59_reg_8125 | icmp_ln800_58_reg_8120);
assign or_ln800_2_fu_2615_p2 = (icmp_ln800_5_fu_2609_p2 | icmp_ln800_4_fu_2603_p2);
assign or_ln800_30_fu_4339_p2 = (icmp_ln800_61_fu_4333_p2 | icmp_ln800_60_fu_4327_p2);
assign or_ln800_31_fu_5435_p2 = (icmp_ln800_63_reg_8151 | icmp_ln800_62_reg_8146);
assign or_ln800_3_fu_4651_p2 = (icmp_ln800_7_reg_7787 | icmp_ln800_6_reg_7782);
assign or_ln800_4_fu_2729_p2 = (icmp_ln800_9_fu_2723_p2 | icmp_ln800_8_fu_2717_p2);
assign or_ln800_5_fu_4707_p2 = (icmp_ln800_11_reg_7813 | icmp_ln800_10_reg_7808);
assign or_ln800_6_fu_2843_p2 = (icmp_ln800_13_fu_2837_p2 | icmp_ln800_12_fu_2831_p2);
assign or_ln800_7_fu_4763_p2 = (icmp_ln800_15_reg_7839 | icmp_ln800_14_reg_7834);
assign or_ln800_8_fu_2957_p2 = (icmp_ln800_17_fu_2951_p2 | icmp_ln800_16_fu_2945_p2);
assign or_ln800_9_fu_4819_p2 = (icmp_ln800_19_reg_7865 | icmp_ln800_18_reg_7860);
assign or_ln800_fu_2501_p2 = (icmp_ln800_fu_2489_p2 | icmp_ln800_1_fu_2495_p2);
assign or_ln803_10_fu_5183_p2 = (icmp_ln803_21_reg_8031 | icmp_ln803_20_reg_8026);
assign or_ln803_11_fu_5239_p2 = (icmp_ln803_23_reg_8057 | icmp_ln803_22_reg_8052);
assign or_ln803_12_fu_5295_p2 = (icmp_ln803_25_reg_8083 | icmp_ln803_24_reg_8078);
assign or_ln803_13_fu_5351_p2 = (icmp_ln803_27_reg_8109 | icmp_ln803_26_reg_8104);
assign or_ln803_14_fu_5407_p2 = (icmp_ln803_29_reg_8135 | icmp_ln803_28_reg_8130);
assign or_ln803_15_fu_5463_p2 = (icmp_ln803_31_reg_8161 | icmp_ln803_30_reg_8156);
assign or_ln803_1_fu_4679_p2 = (icmp_ln803_3_reg_7797 | icmp_ln803_2_reg_7792);
assign or_ln803_2_fu_4735_p2 = (icmp_ln803_5_reg_7823 | icmp_ln803_4_reg_7818);
assign or_ln803_3_fu_4791_p2 = (icmp_ln803_7_reg_7849 | icmp_ln803_6_reg_7844);
assign or_ln803_4_fu_4847_p2 = (icmp_ln803_9_reg_7875 | icmp_ln803_8_reg_7870);
assign or_ln803_5_fu_4903_p2 = (icmp_ln803_11_reg_7901 | icmp_ln803_10_reg_7896);
assign or_ln803_6_fu_4959_p2 = (icmp_ln803_13_reg_7927 | icmp_ln803_12_reg_7922);
assign or_ln803_7_fu_5015_p2 = (icmp_ln803_15_reg_7953 | icmp_ln803_14_reg_7948);
assign or_ln803_8_fu_5071_p2 = (icmp_ln803_17_reg_7979 | icmp_ln803_16_reg_7974);
assign or_ln803_9_fu_5127_p2 = (icmp_ln803_19_reg_8005 | icmp_ln803_18_reg_8000);
assign or_ln803_fu_4623_p2 = (icmp_ln803_reg_7766 | icmp_ln803_1_reg_7771);
assign p_out = empty_83_fu_562;
assign p_out1 = empty_82_fu_558;
assign p_out10 = empty_73_fu_522;
assign p_out11 = empty_72_fu_518;
assign p_out12 = empty_71_fu_514;
assign p_out13 = empty_70_fu_510;
assign p_out14 = empty_69_fu_506;
assign p_out15 = empty_68_fu_502;
assign p_out16 = empty_67_fu_498;
assign p_out17 = empty_66_fu_494;
assign p_out18 = empty_65_fu_490;
assign p_out19 = empty_64_fu_486;
assign p_out2 = empty_81_fu_554;
assign p_out20 = empty_63_fu_482;
assign p_out21 = empty_62_fu_478;
assign p_out22 = empty_61_fu_474;
assign p_out23 = empty_60_fu_470;
assign p_out24 = empty_59_fu_466;
assign p_out25 = empty_58_fu_462;
assign p_out26 = empty_57_fu_458;
assign p_out27 = empty_56_fu_454;
assign p_out28 = empty_55_fu_450;
assign p_out29 = empty_54_fu_446;
assign p_out3 = empty_80_fu_550;
assign p_out30 = empty_53_fu_442;
assign p_out31 = empty_52_fu_438;
assign p_out4 = empty_79_fu_546;
assign p_out5 = empty_78_fu_542;
assign p_out6 = empty_77_fu_538;
assign p_out7 = empty_76_fu_534;
assign p_out8 = empty_75_fu_530;
assign p_out9 = empty_74_fu_526;
assign select_ln800_10_fu_4897_p3 = ((and_ln800_11_fu_4884_p2[0:0] == 1'b1) ? bitcast_ln91_5_reg_7618 : p_load151_reg_7404);
assign select_ln800_12_fu_4953_p3 = ((and_ln800_13_fu_4940_p2[0:0] == 1'b1) ? bitcast_ln91_6_reg_7630 : p_load149_reg_7418);
assign select_ln800_14_fu_5009_p3 = ((and_ln800_15_fu_4996_p2[0:0] == 1'b1) ? bitcast_ln91_7_reg_7642 : p_load147_reg_7432);
assign select_ln800_16_fu_5065_p3 = ((and_ln800_17_fu_5052_p2[0:0] == 1'b1) ? bitcast_ln91_8_reg_7654 : p_load145_reg_7446);
assign select_ln800_18_fu_5121_p3 = ((and_ln800_19_fu_5108_p2[0:0] == 1'b1) ? bitcast_ln91_9_reg_7666 : p_load143_reg_7460);
assign select_ln800_20_fu_5177_p3 = ((and_ln800_21_fu_5164_p2[0:0] == 1'b1) ? bitcast_ln91_10_reg_7678 : p_load141_reg_7474);
assign select_ln800_22_fu_5233_p3 = ((and_ln800_23_fu_5220_p2[0:0] == 1'b1) ? bitcast_ln91_11_reg_7690 : p_load139_reg_7488);
assign select_ln800_24_fu_5289_p3 = ((and_ln800_25_fu_5276_p2[0:0] == 1'b1) ? bitcast_ln91_12_reg_7702 : p_load137_reg_7502);
assign select_ln800_26_fu_5345_p3 = ((and_ln800_27_fu_5332_p2[0:0] == 1'b1) ? bitcast_ln91_13_reg_7714 : p_load135_reg_7516);
assign select_ln800_28_fu_5401_p3 = ((and_ln800_29_fu_5388_p2[0:0] == 1'b1) ? bitcast_ln91_14_reg_7726 : p_load133_reg_7530);
assign select_ln800_2_fu_4673_p3 = ((and_ln800_3_fu_4660_p2[0:0] == 1'b1) ? bitcast_ln91_1_reg_7570 : p_load159_reg_7348);
assign select_ln800_30_fu_5457_p3 = ((and_ln800_31_fu_5444_p2[0:0] == 1'b1) ? bitcast_ln91_15_reg_7738 : p_load131_reg_7544);
assign select_ln800_4_fu_4729_p3 = ((and_ln800_5_fu_4716_p2[0:0] == 1'b1) ? bitcast_ln91_2_reg_7582 : p_load157_reg_7362);
assign select_ln800_6_fu_4785_p3 = ((and_ln800_7_fu_4772_p2[0:0] == 1'b1) ? bitcast_ln91_3_reg_7594 : p_load155_reg_7376);
assign select_ln800_8_fu_4841_p3 = ((and_ln800_9_fu_4828_p2[0:0] == 1'b1) ? bitcast_ln91_4_reg_7606 : p_load153_reg_7390);
assign select_ln800_fu_4617_p3 = ((and_ln800_1_fu_4604_p2[0:0] == 1'b1) ? bitcast_ln91_reg_7558 : p_load161_reg_7334);
assign select_ln803_10_fu_4925_p3 = ((and_ln803_11_fu_4912_p2[0:0] == 1'b1) ? bitcast_ln91_5_reg_7618 : p_load150_reg_7411);
assign select_ln803_12_fu_4981_p3 = ((and_ln803_13_fu_4968_p2[0:0] == 1'b1) ? bitcast_ln91_6_reg_7630 : p_load148_reg_7425);
assign select_ln803_14_fu_5037_p3 = ((and_ln803_15_fu_5024_p2[0:0] == 1'b1) ? bitcast_ln91_7_reg_7642 : p_load146_reg_7439);
assign select_ln803_16_fu_5093_p3 = ((and_ln803_17_fu_5080_p2[0:0] == 1'b1) ? bitcast_ln91_8_reg_7654 : p_load144_reg_7453);
assign select_ln803_18_fu_5149_p3 = ((and_ln803_19_fu_5136_p2[0:0] == 1'b1) ? bitcast_ln91_9_reg_7666 : p_load142_reg_7467);
assign select_ln803_20_fu_5205_p3 = ((and_ln803_21_fu_5192_p2[0:0] == 1'b1) ? bitcast_ln91_10_reg_7678 : p_load140_reg_7481);
assign select_ln803_22_fu_5261_p3 = ((and_ln803_23_fu_5248_p2[0:0] == 1'b1) ? bitcast_ln91_11_reg_7690 : p_load138_reg_7495);
assign select_ln803_24_fu_5317_p3 = ((and_ln803_25_fu_5304_p2[0:0] == 1'b1) ? bitcast_ln91_12_reg_7702 : p_load136_reg_7509);
assign select_ln803_26_fu_5373_p3 = ((and_ln803_27_fu_5360_p2[0:0] == 1'b1) ? bitcast_ln91_13_reg_7714 : p_load134_reg_7523);
assign select_ln803_28_fu_5429_p3 = ((and_ln803_29_fu_5416_p2[0:0] == 1'b1) ? bitcast_ln91_14_reg_7726 : p_load132_reg_7537);
assign select_ln803_2_fu_4701_p3 = ((and_ln803_3_fu_4688_p2[0:0] == 1'b1) ? bitcast_ln91_1_reg_7570 : p_load158_reg_7355);
assign select_ln803_30_fu_5485_p3 = ((and_ln803_31_fu_5472_p2[0:0] == 1'b1) ? bitcast_ln91_15_reg_7738 : p_load130_reg_7551);
assign select_ln803_4_fu_4757_p3 = ((and_ln803_5_fu_4744_p2[0:0] == 1'b1) ? bitcast_ln91_2_reg_7582 : p_load156_reg_7369);
assign select_ln803_6_fu_4813_p3 = ((and_ln803_7_fu_4800_p2[0:0] == 1'b1) ? bitcast_ln91_3_reg_7594 : p_load154_reg_7383);
assign select_ln803_8_fu_4869_p3 = ((and_ln803_9_fu_4856_p2[0:0] == 1'b1) ? bitcast_ln91_4_reg_7606 : p_load152_reg_7397);
assign select_ln803_fu_4645_p3 = ((and_ln803_1_fu_4632_p2[0:0] == 1'b1) ? bitcast_ln91_reg_7558 : p_load160_reg_7341);
assign tmp_10_fu_2703_p4 = {{bitcast_ln800_2_fu_2699_p1[30:23]}};
assign tmp_12_fu_2759_p4 = {{bitcast_ln803_2_fu_2755_p1[30:23]}};
assign tmp_14_fu_2793_p4 = {{input_stream_s_dout[126:119]}};
assign tmp_15_fu_2817_p4 = {{bitcast_ln800_3_fu_2813_p1[30:23]}};
assign tmp_17_fu_2873_p4 = {{bitcast_ln803_3_fu_2869_p1[30:23]}};
assign tmp_19_fu_2907_p4 = {{input_stream_s_dout[158:151]}};
assign tmp_1_fu_2531_p4 = {{bitcast_ln803_fu_2527_p1[30:23]}};
assign tmp_20_fu_2931_p4 = {{bitcast_ln800_4_fu_2927_p1[30:23]}};
assign tmp_22_fu_2987_p4 = {{bitcast_ln803_4_fu_2983_p1[30:23]}};
assign tmp_24_fu_3021_p4 = {{input_stream_s_dout[190:183]}};
assign tmp_25_fu_3045_p4 = {{bitcast_ln800_5_fu_3041_p1[30:23]}};
assign tmp_27_fu_3101_p4 = {{bitcast_ln803_5_fu_3097_p1[30:23]}};
assign tmp_29_fu_3135_p4 = {{input_stream_s_dout[222:215]}};
assign tmp_30_fu_3159_p4 = {{bitcast_ln800_6_fu_3155_p1[30:23]}};
assign tmp_32_fu_3215_p4 = {{bitcast_ln803_6_fu_3211_p1[30:23]}};
assign tmp_34_fu_3249_p4 = {{input_stream_s_dout[254:247]}};
assign tmp_35_fu_3273_p4 = {{bitcast_ln800_7_fu_3269_p1[30:23]}};
assign tmp_37_fu_3329_p4 = {{bitcast_ln803_7_fu_3325_p1[30:23]}};
assign tmp_39_fu_3363_p4 = {{input_stream_s_dout[286:279]}};
assign tmp_3_fu_2565_p4 = {{input_stream_s_dout[62:55]}};
assign tmp_40_fu_3387_p4 = {{bitcast_ln800_8_fu_3383_p1[30:23]}};
assign tmp_42_fu_3443_p4 = {{bitcast_ln803_8_fu_3439_p1[30:23]}};
assign tmp_44_fu_3477_p4 = {{input_stream_s_dout[318:311]}};
assign tmp_45_fu_3501_p4 = {{bitcast_ln800_9_fu_3497_p1[30:23]}};
assign tmp_47_fu_3557_p4 = {{bitcast_ln803_9_fu_3553_p1[30:23]}};
assign tmp_49_fu_3591_p4 = {{input_stream_s_dout[350:343]}};
assign tmp_4_fu_2589_p4 = {{bitcast_ln800_1_fu_2585_p1[30:23]}};
assign tmp_50_fu_3615_p4 = {{bitcast_ln800_10_fu_3611_p1[30:23]}};
assign tmp_52_fu_3671_p4 = {{bitcast_ln803_10_fu_3667_p1[30:23]}};
assign tmp_54_fu_3705_p4 = {{input_stream_s_dout[382:375]}};
assign tmp_55_fu_3729_p4 = {{bitcast_ln800_11_fu_3725_p1[30:23]}};
assign tmp_57_fu_3785_p4 = {{bitcast_ln803_11_fu_3781_p1[30:23]}};
assign tmp_59_fu_3819_p4 = {{input_stream_s_dout[414:407]}};
assign tmp_60_fu_3843_p4 = {{bitcast_ln800_12_fu_3839_p1[30:23]}};
assign tmp_62_fu_3899_p4 = {{bitcast_ln803_12_fu_3895_p1[30:23]}};
assign tmp_64_fu_3933_p4 = {{input_stream_s_dout[446:439]}};
assign tmp_65_fu_3957_p4 = {{bitcast_ln800_13_fu_3953_p1[30:23]}};
assign tmp_67_fu_4013_p4 = {{bitcast_ln803_13_fu_4009_p1[30:23]}};
assign tmp_69_fu_4047_p4 = {{input_stream_s_dout[478:471]}};
assign tmp_6_fu_2645_p4 = {{bitcast_ln803_1_fu_2641_p1[30:23]}};
assign tmp_70_fu_4071_p4 = {{bitcast_ln800_14_fu_4067_p1[30:23]}};
assign tmp_72_fu_4127_p4 = {{bitcast_ln803_14_fu_4123_p1[30:23]}};
assign tmp_74_fu_4289_p4 = {{input_stream_s_dout[510:503]}};
assign tmp_75_fu_4313_p4 = {{bitcast_ln800_15_fu_4309_p1[30:23]}};
assign tmp_77_fu_4369_p4 = {{bitcast_ln803_15_fu_4365_p1[30:23]}};
assign tmp_8_fu_2679_p4 = {{input_stream_s_dout[94:87]}};
assign tmp_9_fu_2475_p4 = {{bitcast_ln800_fu_2471_p1[30:23]}};
assign tmp_fu_2457_p4 = {{input_stream_s_dout[30:23]}};
assign trunc_ln800_10_fu_3055_p1 = bitcast_ln800_5_fu_3041_p1[22:0];
assign trunc_ln800_11_fu_3145_p4 = {{input_stream_s_dout[214:192]}};
assign trunc_ln800_12_fu_3169_p1 = bitcast_ln800_6_fu_3155_p1[22:0];
assign trunc_ln800_13_fu_3259_p4 = {{input_stream_s_dout[246:224]}};
assign trunc_ln800_14_fu_3283_p1 = bitcast_ln800_7_fu_3269_p1[22:0];
assign trunc_ln800_15_fu_3373_p4 = {{input_stream_s_dout[278:256]}};
assign trunc_ln800_16_fu_3397_p1 = bitcast_ln800_8_fu_3383_p1[22:0];
assign trunc_ln800_17_fu_3487_p4 = {{input_stream_s_dout[310:288]}};
assign trunc_ln800_18_fu_3511_p1 = bitcast_ln800_9_fu_3497_p1[22:0];
assign trunc_ln800_19_fu_3601_p4 = {{input_stream_s_dout[342:320]}};
assign trunc_ln800_1_fu_2485_p1 = bitcast_ln800_fu_2471_p1[22:0];
assign trunc_ln800_20_fu_3625_p1 = bitcast_ln800_10_fu_3611_p1[22:0];
assign trunc_ln800_21_fu_3715_p4 = {{input_stream_s_dout[374:352]}};
assign trunc_ln800_22_fu_3739_p1 = bitcast_ln800_11_fu_3725_p1[22:0];
assign trunc_ln800_23_fu_3829_p4 = {{input_stream_s_dout[406:384]}};
assign trunc_ln800_24_fu_3853_p1 = bitcast_ln800_12_fu_3839_p1[22:0];
assign trunc_ln800_25_fu_3943_p4 = {{input_stream_s_dout[438:416]}};
assign trunc_ln800_26_fu_3967_p1 = bitcast_ln800_13_fu_3953_p1[22:0];
assign trunc_ln800_27_fu_4057_p4 = {{input_stream_s_dout[470:448]}};
assign trunc_ln800_28_fu_4081_p1 = bitcast_ln800_14_fu_4067_p1[22:0];
assign trunc_ln800_29_fu_4299_p4 = {{input_stream_s_dout[502:480]}};
assign trunc_ln800_2_fu_2575_p4 = {{input_stream_s_dout[54:32]}};
assign trunc_ln800_30_fu_4323_p1 = bitcast_ln800_15_fu_4309_p1[22:0];
assign trunc_ln800_3_fu_2599_p1 = bitcast_ln800_1_fu_2585_p1[22:0];
assign trunc_ln800_4_fu_2689_p4 = {{input_stream_s_dout[86:64]}};
assign trunc_ln800_5_fu_2713_p1 = bitcast_ln800_2_fu_2699_p1[22:0];
assign trunc_ln800_6_fu_2803_p4 = {{input_stream_s_dout[118:96]}};
assign trunc_ln800_7_fu_2827_p1 = bitcast_ln800_3_fu_2813_p1[22:0];
assign trunc_ln800_8_fu_2917_p4 = {{input_stream_s_dout[150:128]}};
assign trunc_ln800_9_fu_2941_p1 = bitcast_ln800_4_fu_2927_p1[22:0];
assign trunc_ln800_fu_2467_p1 = input_stream_s_dout[22:0];
assign trunc_ln800_s_fu_3031_p4 = {{input_stream_s_dout[182:160]}};
assign trunc_ln803_10_fu_3681_p1 = bitcast_ln803_10_fu_3667_p1[22:0];
assign trunc_ln803_11_fu_3795_p1 = bitcast_ln803_11_fu_3781_p1[22:0];
assign trunc_ln803_12_fu_3909_p1 = bitcast_ln803_12_fu_3895_p1[22:0];
assign trunc_ln803_13_fu_4023_p1 = bitcast_ln803_13_fu_4009_p1[22:0];
assign trunc_ln803_14_fu_4137_p1 = bitcast_ln803_14_fu_4123_p1[22:0];
assign trunc_ln803_15_fu_4379_p1 = bitcast_ln803_15_fu_4365_p1[22:0];
assign trunc_ln803_1_fu_2655_p1 = bitcast_ln803_1_fu_2641_p1[22:0];
assign trunc_ln803_2_fu_2769_p1 = bitcast_ln803_2_fu_2755_p1[22:0];
assign trunc_ln803_3_fu_2883_p1 = bitcast_ln803_3_fu_2869_p1[22:0];
assign trunc_ln803_4_fu_2997_p1 = bitcast_ln803_4_fu_2983_p1[22:0];
assign trunc_ln803_5_fu_3111_p1 = bitcast_ln803_5_fu_3097_p1[22:0];
assign trunc_ln803_6_fu_3225_p1 = bitcast_ln803_6_fu_3211_p1[22:0];
assign trunc_ln803_7_fu_3339_p1 = bitcast_ln803_7_fu_3325_p1[22:0];
assign trunc_ln803_8_fu_3453_p1 = bitcast_ln803_8_fu_3439_p1[22:0];
assign trunc_ln803_9_fu_3567_p1 = bitcast_ln803_9_fu_3553_p1[22:0];
assign trunc_ln803_fu_2541_p1 = bitcast_ln803_fu_2527_p1[22:0];
assign trunc_ln91_10_fu_2327_p4 = {{input_stream_s_dout[383:352]}};
assign trunc_ln91_11_fu_2337_p4 = {{input_stream_s_dout[415:384]}};
assign trunc_ln91_12_fu_2347_p4 = {{input_stream_s_dout[447:416]}};
assign trunc_ln91_13_fu_2357_p4 = {{input_stream_s_dout[479:448]}};
assign trunc_ln91_14_fu_2367_p4 = {{input_stream_s_dout[511:480]}};
assign trunc_ln91_1_fu_2317_p4 = {{input_stream_s_dout[351:320]}};
assign trunc_ln91_2_fu_2227_p4 = {{input_stream_s_dout[63:32]}};
assign trunc_ln91_3_fu_2237_p4 = {{input_stream_s_dout[95:64]}};
assign trunc_ln91_4_fu_2247_p4 = {{input_stream_s_dout[127:96]}};
assign trunc_ln91_5_fu_2257_p4 = {{input_stream_s_dout[159:128]}};
assign trunc_ln91_6_fu_2267_p4 = {{input_stream_s_dout[191:160]}};
assign trunc_ln91_7_fu_2277_p4 = {{input_stream_s_dout[223:192]}};
assign trunc_ln91_8_fu_2287_p4 = {{input_stream_s_dout[255:224]}};
assign trunc_ln91_9_fu_2297_p4 = {{input_stream_s_dout[287:256]}};
assign trunc_ln91_fu_2223_p1 = input_stream_s_dout[31:0];
assign trunc_ln91_s_fu_2307_p4 = {{input_stream_s_dout[319:288]}};
assign zext_ln795_fu_2202_p1 = k_1_reg_7325;
endmodule