`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module quant_layer_r1_ln_iembed_fp32_int4_generic_round_float_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        x,
        ap_return
);
parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [31:0] x;
output  [31:0] ap_return;
reg ap_done;
reg ap_idle;
reg ap_ready;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire   [4:0] mask_table_address0;
wire   [22:0] mask_table_q0;
wire   [4:0] one_half_table_address0;
wire   [23:0] one_half_table_q0;
reg   [31:0] x_read_reg_238;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] data_fu_86_p1;
reg   [31:0] data_reg_243;
wire   [0:0] icmp_ln167_fu_100_p2;
reg   [0:0] icmp_ln167_reg_248;
reg   [0:0] tmp_reg_254;
wire   [0:0] icmp_ln170_fu_114_p2;
reg   [0:0] icmp_ln170_reg_259;
wire   [63:0] zext_ln179_fu_130_p1;
wire    ap_block_pp0_stage0;
reg    mask_table_ce0_local;
reg    one_half_table_ce0_local;
wire   [7:0] xs_exp_fu_90_p4;
wire   [4:0] index_fu_120_p4;
wire   [31:0] t_fu_144_p3;
wire   [31:0] zext_ln175_fu_155_p1;
wire   [31:0] add_ln182_fu_159_p2;
wire   [22:0] trunc_ln301_fu_164_p1;
wire   [22:0] xor_ln184_fu_168_p2;
wire   [8:0] tmp_65_fu_180_p4;
wire   [22:0] xs_sig_fu_174_p2;
wire   [31:0] t_2_fu_190_p3;
wire   [0:0] xor_ln167_fu_202_p2;
wire   [0:0] and_ln170_fu_207_p2;
wire   [31:0] retval_fu_219_p2;
wire   [31:0] retval_fu_219_p6;
wire   [31:0] retval_fu_219_p7;
wire   [1:0] retval_fu_219_p8;
wire   [31:0] retval_fu_219_p9;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire  signed [1:0] retval_fu_219_p1;
wire   [1:0] retval_fu_219_p3;
wire   [1:0] retval_fu_219_p5;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end
quant_layer_r1_ln_iembed_fp32_int4_generic_round_float_s_mask_table_ROM_AUTO_1R #(
    .DataWidth( 23 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
mask_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table_address0),
    .ce0(mask_table_ce0_local),
    .q0(mask_table_q0)
);
quant_layer_r1_ln_iembed_fp32_int4_generic_round_float_s_one_half_table_ROM_AUTO_1R #(
    .DataWidth( 24 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
one_half_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(one_half_table_address0),
    .ce0(one_half_table_ce0_local),
    .q0(one_half_table_q0)
);
(* dissolve_hierarchy = "yes" *) quant_layer_r1_ln_iembed_fp32_int4_sparsemux_7_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h2 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h0 ),
    .din2_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_7_2_32_1_1_U124(
    .din0(retval_fu_219_p2),
    .din1(x_read_reg_238),
    .din2(retval_fu_219_p6),
    .def(retval_fu_219_p7),
    .sel(retval_fu_219_p8),
    .dout(retval_fu_219_p9)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_reg_243 <= data_fu_86_p1;
        icmp_ln167_reg_248 <= icmp_ln167_fu_100_p2;
        icmp_ln170_reg_259 <= icmp_ln170_fu_114_p2;
        tmp_reg_254 <= data_fu_86_p1[32'd31];
        x_read_reg_238 <= x;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end
always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end
always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mask_table_ce0_local = 1'b1;
    end else begin
        mask_table_ce0_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        one_half_table_ce0_local = 1'b1;
    end else begin
        one_half_table_ce0_local = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign add_ln182_fu_159_p2 = (zext_ln175_fu_155_p1 + data_reg_243);
assign and_ln170_fu_207_p2 = (xor_ln167_fu_202_p2 & icmp_ln170_reg_259);
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_enable_reg_pp0_iter0 = ap_start;
assign ap_return = retval_fu_219_p9;
assign data_fu_86_p1 = x;
assign icmp_ln167_fu_100_p2 = ((xs_exp_fu_90_p4 < 8'd126) ? 1'b1 : 1'b0);
assign icmp_ln170_fu_114_p2 = ((xs_exp_fu_90_p4 > 8'd150) ? 1'b1 : 1'b0);
assign index_fu_120_p4 = {{data_fu_86_p1[27:23]}};
assign mask_table_address0 = zext_ln179_fu_130_p1;
assign one_half_table_address0 = zext_ln179_fu_130_p1;
assign retval_fu_219_p2 = t_fu_144_p3;
assign retval_fu_219_p6 = t_2_fu_190_p3;
assign retval_fu_219_p7 = 'bx;
assign retval_fu_219_p8 = {{icmp_ln167_reg_248}, {and_ln170_fu_207_p2}};
assign t_2_fu_190_p3 = {{tmp_65_fu_180_p4}, {xs_sig_fu_174_p2}};
assign t_fu_144_p3 = {{tmp_reg_254}, {31'd0}};
assign tmp_65_fu_180_p4 = {{add_ln182_fu_159_p2[31:23]}};
assign trunc_ln301_fu_164_p1 = add_ln182_fu_159_p2[22:0];
assign xor_ln167_fu_202_p2 = (icmp_ln167_reg_248 ^ 1'd1);
assign xor_ln184_fu_168_p2 = (mask_table_q0 ^ 23'd8388607);
assign xs_exp_fu_90_p4 = {{data_fu_86_p1[30:23]}};
assign xs_sig_fu_174_p2 = (xor_ln184_fu_168_p2 & trunc_ln301_fu_164_p1);
assign zext_ln175_fu_155_p1 = one_half_table_q0;
assign zext_ln179_fu_130_p1 = index_fu_120_p4;
endmodule