`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
module Linear_Layer_i4xi4_q_PE_i4xi4_pack_2x2_true_11_false_false_58_Pipeline_PE_LOOP (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_fifo_3_9_dout,
        A_fifo_3_9_num_data_valid,
        A_fifo_3_9_fifo_cap,
        A_fifo_3_9_empty_n,
        A_fifo_3_9_read,
        B_fifo_9_3_dout,
        B_fifo_9_3_num_data_valid,
        B_fifo_9_3_fifo_cap,
        B_fifo_9_3_empty_n,
        B_fifo_9_3_read,
        A_fifo_3_10_din,
        A_fifo_3_10_num_data_valid,
        A_fifo_3_10_fifo_cap,
        A_fifo_3_10_full_n,
        A_fifo_3_10_write,
        B_fifo_9_4_din,
        B_fifo_9_4_num_data_valid,
        B_fifo_9_4_fifo_cap,
        B_fifo_9_4_full_n,
        B_fifo_9_4_write,
        pack_c_0_out,
        pack_c_0_out_ap_vld,
        pack_c_1_out,
        pack_c_1_out_ap_vld
);
parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] A_fifo_3_9_dout;
input  [4:0] A_fifo_3_9_num_data_valid;
input  [4:0] A_fifo_3_9_fifo_cap;
input   A_fifo_3_9_empty_n;
output   A_fifo_3_9_read;
input  [7:0] B_fifo_9_3_dout;
input  [5:0] B_fifo_9_3_num_data_valid;
input  [5:0] B_fifo_9_3_fifo_cap;
input   B_fifo_9_3_empty_n;
output   B_fifo_9_3_read;
output  [7:0] A_fifo_3_10_din;
input  [4:0] A_fifo_3_10_num_data_valid;
input  [4:0] A_fifo_3_10_fifo_cap;
input   A_fifo_3_10_full_n;
output   A_fifo_3_10_write;
output  [7:0] B_fifo_9_4_din;
input  [5:0] B_fifo_9_4_num_data_valid;
input  [5:0] B_fifo_9_4_fifo_cap;
input   B_fifo_9_4_full_n;
output   B_fifo_9_4_write;
output  [37:0] pack_c_0_out;
output   pack_c_0_out_ap_vld;
output  [37:0] pack_c_1_out;
output   pack_c_1_out_ap_vld;
reg ap_idle;
reg pack_c_0_out_ap_vld;
reg pack_c_1_out_ap_vld;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln1433_fu_224_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    A_fifo_3_9_blk_n;
wire    ap_block_pp0_stage0;
reg    B_fifo_9_3_blk_n;
reg    A_fifo_3_10_blk_n;
reg    B_fifo_9_4_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] a0_fu_178_p1;
reg   [3:0] a0_reg_392;
reg   [3:0] a1_reg_397;
wire   [3:0] b0_fu_194_p1;
reg   [3:0] b0_reg_402;
reg   [3:0] b1_reg_407;
reg   [0:0] b0_sign_ex_reg_412;
reg   [0:0] icmp_ln1433_reg_418;
reg   [0:0] icmp_ln1433_reg_418_pp0_iter1_reg;
reg   [0:0] icmp_ln1433_reg_418_pp0_iter2_reg;
reg   [0:0] icmp_ln1433_reg_418_pp0_iter3_reg;
wire  signed [27:0] sext_ln1445_fu_277_p1;
reg   [10:0] k_061_fu_74;
wire   [10:0] k_fu_170_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_k_061_load;
reg   [37:0] pack_c_1_052_fu_78;
wire  signed [37:0] grp_fu_350_p3;
reg  signed [37:0] ap_sig_allocacmp_pack_c_1_052_load;
reg   [37:0] pack_c_0_044_fu_82;
wire  signed [37:0] grp_fu_338_p3;
reg  signed [37:0] ap_sig_allocacmp_pack_c_0_044_load;
reg    A_fifo_3_9_read_local;
reg    B_fifo_9_3_read_local;
reg    ap_block_pp0_stage0_01001;
reg    A_fifo_3_10_write_local;
reg    B_fifo_9_4_write_local;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
wire  signed [4:0] sext_ln1441_fu_242_p1;
wire   [4:0] b1_temp_fu_245_p2;
wire   [4:0] b1_temp_68_fu_251_p3;
wire   [14:0] select_ln1442_fu_258_p3;
wire   [23:0] pack_b_fu_265_p4;
wire  signed [23:0] grp_fu_338_p0;
wire   [3:0] grp_fu_338_p1;
wire  signed [23:0] grp_fu_350_p0;
wire   [3:0] grp_fu_350_p1;
reg    grp_fu_338_ce;
reg    grp_fu_350_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [27:0] grp_fu_338_p10;
wire   [27:0] grp_fu_350_p10;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 k_061_fu_74 = 11'd0;
#0 pack_c_1_052_fu_78 = 38'd0;
#0 pack_c_0_044_fu_82 = 38'd0;
#0 ap_done_reg = 1'b0;
end
Linear_Layer_i4xi4_q_mac_muladd_24s_4ns_38s_38_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 38 ),
    .dout_WIDTH( 38 ))
mac_muladd_24s_4ns_38s_38_4_1_U799(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_338_p0),
    .din1(grp_fu_338_p1),
    .din2(ap_sig_allocacmp_pack_c_0_044_load),
    .ce(grp_fu_338_ce),
    .dout(grp_fu_338_p3)
);
Linear_Layer_i4xi4_q_mac_muladd_24s_4ns_38s_38_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 24 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 38 ),
    .dout_WIDTH( 38 ))
mac_muladd_24s_4ns_38s_38_4_1_U800(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_350_p0),
    .din1(grp_fu_350_p1),
    .din2(ap_sig_allocacmp_pack_c_1_052_load),
    .ce(grp_fu_350_ce),
    .dout(grp_fu_350_p3)
);
Linear_Layer_i4xi4_q_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_start_int == 1'b1)) begin
            k_061_fu_74 <= k_fu_170_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_061_fu_74 <= 11'd0;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            pack_c_0_044_fu_82 <= 38'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            pack_c_0_044_fu_82 <= grp_fu_338_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            pack_c_1_052_fu_78 <= 38'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            pack_c_1_052_fu_78 <= grp_fu_350_p3;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a0_reg_392 <= a0_fu_178_p1;
        a1_reg_397 <= {{A_fifo_3_9_dout[7:4]}};
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        b0_reg_402 <= b0_fu_194_p1;
        b0_sign_ex_reg_412 <= B_fifo_9_3_dout[32'd3];
        b1_reg_407 <= {{B_fifo_9_3_dout[7:4]}};
        icmp_ln1433_reg_418 <= icmp_ln1433_fu_224_p2;
        icmp_ln1433_reg_418_pp0_iter1_reg <= icmp_ln1433_reg_418;
    end
end
always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln1433_reg_418_pp0_iter2_reg <= icmp_ln1433_reg_418_pp0_iter1_reg;
        icmp_ln1433_reg_418_pp0_iter3_reg <= icmp_ln1433_reg_418_pp0_iter2_reg;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_3_10_blk_n = A_fifo_3_10_full_n;
    end else begin
        A_fifo_3_10_blk_n = 1'b1;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_3_10_write_local = 1'b1;
    end else begin
        A_fifo_3_10_write_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_3_9_blk_n = A_fifo_3_9_empty_n;
    end else begin
        A_fifo_3_9_blk_n = 1'b1;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_fifo_3_9_read_local = 1'b1;
    end else begin
        A_fifo_3_9_read_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_9_3_blk_n = B_fifo_9_3_empty_n;
    end else begin
        B_fifo_9_3_blk_n = 1'b1;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_9_3_read_local = 1'b1;
    end else begin
        B_fifo_9_3_read_local = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_9_4_blk_n = B_fifo_9_4_full_n;
    end else begin
        B_fifo_9_4_blk_n = 1'b1;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        B_fifo_9_4_write_local = 1'b1;
    end else begin
        B_fifo_9_4_write_local = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln1433_fu_224_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end
always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_k_061_load = 11'd0;
    end else begin
        ap_sig_allocacmp_k_061_load = k_061_fu_74;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_sig_allocacmp_pack_c_0_044_load = grp_fu_338_p3;
    end else begin
        ap_sig_allocacmp_pack_c_0_044_load = pack_c_0_044_fu_82;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        ap_sig_allocacmp_pack_c_1_052_load = grp_fu_350_p3;
    end else begin
        ap_sig_allocacmp_pack_c_1_052_load = pack_c_1_052_fu_78;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_338_ce = 1'b1;
    end else begin
        grp_fu_338_ce = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_350_ce = 1'b1;
    end else begin
        grp_fu_350_ce = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (icmp_ln1433_reg_418_pp0_iter3_reg == 1'd1))) begin
        pack_c_0_out_ap_vld = 1'b1;
    end else begin
        pack_c_0_out_ap_vld = 1'b0;
    end
end
always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (icmp_ln1433_reg_418_pp0_iter3_reg == 1'd1))) begin
        pack_c_1_out_ap_vld = 1'b1;
    end else begin
        pack_c_1_out_ap_vld = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign A_fifo_3_10_din = A_fifo_3_9_dout;
assign A_fifo_3_10_write = A_fifo_3_10_write_local;
assign A_fifo_3_9_read = A_fifo_3_9_read_local;
assign B_fifo_9_3_read = B_fifo_9_3_read_local;
assign B_fifo_9_4_din = B_fifo_9_3_dout;
assign B_fifo_9_4_write = B_fifo_9_4_write_local;
assign a0_fu_178_p1 = A_fifo_3_9_dout[3:0];
assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];
assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);
always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0));
end
always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0));
end
always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0));
end
always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((1'b0 == B_fifo_9_4_full_n) | (1'b0 == A_fifo_3_10_full_n) | (1'b0 == B_fifo_9_3_empty_n) | (1'b0 == A_fifo_3_9_empty_n));
end
assign ap_done = ap_done_sig;
assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);
assign ap_enable_reg_pp0_iter0 = ap_start_int;
assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;
assign ap_ready = ap_ready_sig;
assign b0_fu_194_p1 = B_fifo_9_3_dout[3:0];
assign b1_temp_68_fu_251_p3 = ((b0_sign_ex_reg_412[0:0] == 1'b1) ? b1_temp_fu_245_p2 : sext_ln1441_fu_242_p1);
assign b1_temp_fu_245_p2 = ($signed(sext_ln1441_fu_242_p1) + $signed(5'd31));
assign grp_fu_338_p0 = sext_ln1445_fu_277_p1;
assign grp_fu_338_p1 = grp_fu_338_p10;
assign grp_fu_338_p10 = a0_reg_392;
assign grp_fu_350_p0 = sext_ln1445_fu_277_p1;
assign grp_fu_350_p1 = grp_fu_350_p10;
assign grp_fu_350_p10 = a1_reg_397;
assign icmp_ln1433_fu_224_p2 = ((ap_sig_allocacmp_k_061_load == 11'd2047) ? 1'b1 : 1'b0);
assign k_fu_170_p2 = (ap_sig_allocacmp_k_061_load + 11'd1);
assign pack_b_fu_265_p4 = {{{b1_temp_68_fu_251_p3}, {select_ln1442_fu_258_p3}}, {b0_reg_402}};
assign pack_c_0_out = grp_fu_338_p3;
assign pack_c_1_out = grp_fu_350_p3;
assign select_ln1442_fu_258_p3 = ((b0_sign_ex_reg_412[0:0] == 1'b1) ? 15'd32767 : 15'd0);
assign sext_ln1441_fu_242_p1 = $signed(b1_reg_407);
assign sext_ln1445_fu_277_p1 = $signed(pack_b_fu_265_p4);
endmodule