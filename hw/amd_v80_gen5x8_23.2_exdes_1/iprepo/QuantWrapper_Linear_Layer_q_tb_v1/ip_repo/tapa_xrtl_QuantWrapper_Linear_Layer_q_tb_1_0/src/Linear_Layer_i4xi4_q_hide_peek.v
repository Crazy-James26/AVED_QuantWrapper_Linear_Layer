`timescale 1 ns / 1 ps
// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================
 
(* CORE_GENERATION_INFO="Linear_Layer_i4xi4_q_Linear_Layer_i4xi4_q,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcv80-lsva4737-2MHP-e-S,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.685000,HLS_SYN_LAT=68469313,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=46632,HLS_SYN_LUT=97280,HLS_VERSION=2024_1}" *)
module Linear_Layer_i4xi4_q_hide_peek (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_stream_s_dout,
        input_stream_s_empty_n,
        input_stream_s_read,
        input_stream_peek_dout,
        input_stream_peek_empty_n,
        input_stream_peek_read,
        weight_stream_s_dout,
        weight_stream_s_empty_n,
        weight_stream_s_read,
        weight_stream_peek_dout,
        weight_stream_peek_empty_n,
        weight_stream_peek_read,
        output_stream_s_din,
        output_stream_s_full_n,
        output_stream_s_write,
        output_stream_peek,
        seq_len
);
parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;
input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [64:0] input_stream_s_dout;
input   input_stream_s_empty_n;
output   input_stream_s_read;
input  [64:0] input_stream_peek_dout;
input   input_stream_peek_empty_n;
output   input_stream_peek_read;
input  [128:0] weight_stream_s_dout;
input   weight_stream_s_empty_n;
output   weight_stream_s_read;
input  [128:0] weight_stream_peek_dout;
input   weight_stream_peek_empty_n;
output   weight_stream_peek_read;
output  [304:0] output_stream_s_din;
input   output_stream_s_full_n;
output   output_stream_s_write;
input  [304:0] output_stream_peek;
input  [31:0] seq_len;
reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_stream_s_read;
reg weight_stream_s_read;
reg output_stream_s_write;
 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_start;
wire    grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_done;
wire    grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_idle;
wire    grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_ready;
wire    grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_input_stream_s_read;
wire    grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_weight_stream_s_read;
wire   [304:0] grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_output_stream_s_din;
wire    grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_output_stream_s_write;
reg    grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln2958_fu_145_p2;
wire    ap_CS_fsm_state3;
reg   [4:0] block_id_fu_58;
wire   [4:0] block_id_2_fu_139_p2;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;
// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_start_reg = 1'b0;
#0 block_id_fu_58 = 5'd0;
end
Linear_Layer_i4xi4_q_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_start),
    .ap_done(grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_done),
    .ap_idle(grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_idle),
    .ap_ready(grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_ready),
    .input_stream_s_dout(input_stream_s_dout),
    .input_stream_s_empty_n(input_stream_s_empty_n),
    .input_stream_s_read(grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_input_stream_s_read),
    .weight_stream_s_dout(weight_stream_s_dout),
    .weight_stream_s_empty_n(weight_stream_s_empty_n),
    .weight_stream_s_read(grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_weight_stream_s_read),
    .output_stream_s_din(grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_output_stream_s_din),
    .output_stream_s_full_n(output_stream_s_full_n),
    .output_stream_s_write(grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_output_stream_s_write),
    .seq_len(seq_len)
);
always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end
always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln2958_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_start_reg <= 1'b1;
        end else if ((grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_ready == 1'b1)) begin
            grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_start_reg <= 1'b0;
        end
    end
end
always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        block_id_fu_58 <= 5'd0;
    end else if (((icmp_ln2958_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        block_id_fu_58 <= block_id_2_fu_139_p2;
    end
end
always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end
assign ap_ST_fsm_state2_blk = 1'b0;
always @ (*) begin
    if ((grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln2958_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end
always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end
always @ (*) begin
    if (((icmp_ln2958_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end
always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_stream_s_read = grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_input_stream_s_read;
    end else begin
        input_stream_s_read = 1'b0;
    end
end
always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        output_stream_s_write = grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_output_stream_s_write;
    end else begin
        output_stream_s_write = 1'b0;
    end
end
always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        weight_stream_s_read = grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_weight_stream_s_read;
    end else begin
        weight_stream_s_read = 1'b0;
    end
end
always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln2958_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end
assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];
assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];
assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];
always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end
assign block_id_2_fu_139_p2 = (block_id_fu_58 + 5'd1);
assign grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_start = grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_ap_start_reg;
assign icmp_ln2958_fu_145_p2 = ((block_id_fu_58 == 5'd16) ? 1'b1 : 1'b0);
assign input_stream_peek_read = 1'b0;
assign output_stream_s_din = grp_Linear_Layer_i4xi4_16_32_2048_11_2048_1024_true_s_fu_108_output_stream_s_din;
assign weight_stream_peek_read = 1'b0;
endmodule